[
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalFigure",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#informalfigure",
        "title": "InformalFigure",
        "section": "InformalFigure",
        "text": "Bases: Element\nProvides the base element.\nInformalFigure\nInformalFigure\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalFigure",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#src.pyconverter.xml2py.ast_tree.InformalFigure",
        "title": "InformalFigure > InformalFigure > InformalFigure",
        "section": "InformalFigure > InformalFigure",
        "text": "class src.pyconverter.xml2py.ast_tree.InformalFigure(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalFigure",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalFigure.html#import-detail",
        "title": "InformalFigure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#guimenuitem",
        "title": "GuiMenuItem",
        "section": "GuiMenuItem",
        "text": "Bases: Element\nProvides the GUI menu item element.\nGuiMenuItem\nGuiMenuItem\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#src.pyconverter.xml2py.ast_tree.GuiMenuItem",
        "title": "GuiMenuItem > GuiMenuItem > GuiMenuItem",
        "section": "GuiMenuItem > GuiMenuItem",
        "text": "class src.pyconverter.xml2py.ast_tree.GuiMenuItem(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI menu item element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenuItem.html#import-detail",
        "title": "GuiMenuItem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section provides some guidelines for using PyConverter-XML2Py.\nYou can modify each step as needed to convert your own Docbook XML documentation.\nUser guide"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#predefined-format",
        "title": "User guide > Predefined format",
        "section": "Predefined format",
        "text": "The conversion is based on a predefined XML directory format that you\nshould follow:\nPredefined format"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#template-directory",
        "title": "User guide > Template directory",
        "section": "Template directory",
        "text": "The _package directory is the template that the autogenerated package\nfollows.\nTemplate directory\n_package"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#convert-an-xml-directory",
        "title": "User guide > Convert an XML directory",
        "section": "Convert an XML directory",
        "text": "Once the XML_directory is correctly organized, you can use this command\nto run the converter:\nIf you need to customize some functions, you can specify the path containing the\nPython files:\nFor more information, see ref_source_code.\nAfter the converter runs, you can generate Sphinx documentation. This code renders\nthe documentation as HTML from Windows:\nConvert an XML directory\nXML_directory"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#autogenerated-package",
        "title": "User guide > Autogenerated package",
        "section": "Autogenerated package",
        "text": "The Sphinx documentation is contained in the autogenerated package\ndirectory by default. This diagram presents the format of the\npackage directory:\nAutogenerated package\npackage\npackage"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#superscript",
        "title": "SuperScript",
        "section": "SuperScript",
        "text": "Bases: Element\nProvides the superscript element.\nSuperScript\nSuperScript\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#src.pyconverter.xml2py.ast_tree.SuperScript",
        "title": "SuperScript > SuperScript > SuperScript",
        "section": "SuperScript > SuperScript",
        "text": "class src.pyconverter.xml2py.ast_tree.SuperScript(element, parse_children=True)\n\nBases: Element\n\nProvides the superscript element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#overview",
        "title": "SuperScript > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#import-detail",
        "title": "SuperScript > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#method-detail",
        "title": "SuperScript > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SuperScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SuperScript.html#SuperScript.to_rst",
        "title": "SuperScript > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "SuperScript.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pyconverter-xml2py",
        "title": "PyConverter-XML2Py",
        "section": "PyConverter-XML2Py",
        "text": "PyConverter-XML2Py is a Python library for converting technical Docbook XML documentation into\nPython source code so that Sphinx documentation can be generated.\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-start\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><rect fill=\"none\" height=\"24\" width=\"24\"></rect><path d=\"M14.59,7.41L18.17,11H6v2h12.17l-3.59,3.59L16,18l6-6l-6-6L14.59,7.41z M2,6v12h2V6H2z\"></path></svg>\nExplains how to start using PyConverter-XML2Py.\n   Getting started\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-book\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z\"></path></svg>\nPresents in-depth information on the\nkey concepts of PyConverter-XML2Py.\n   User guide\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-code\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path><path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path></svg>\nDescribes members of the the PyConverter-XML2Py API.\n   API reference\n<svg version=\"4.0.0.63c5cb3\" width=\"48.0px\" height=\"48.0px\" class=\"sd-material-icon sd-material-icon-people\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 0h24v24H0z\" fill=\"none\"></path><path d=\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"></path></svg>\nProvides guidelines for contributing to the\ncodebase and documentation.\n   Contribute\nPyConverter-XML2Py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#paragraph",
        "title": "Paragraph",
        "section": "Paragraph",
        "text": "Bases: Element\nProvides the paragraph element.\nParagraph\nParagraph\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#src.pyconverter.xml2py.ast_tree.Paragraph",
        "title": "Paragraph > Paragraph > Paragraph",
        "section": "Paragraph > Paragraph",
        "text": "class src.pyconverter.xml2py.ast_tree.Paragraph(element, parse_children=True)\n\nBases: Element\n\nProvides the paragraph element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#overview",
        "title": "Paragraph > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nOverview\nto_rst\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#import-detail",
        "title": "Paragraph > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#method-detail",
        "title": "Paragraph > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#Paragraph.__repr__",
        "title": "Paragraph > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Paragraph.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Paragraph",
        "href": "api/src/pyconverter/xml2py/ast_tree/Paragraph.html#Paragraph.to_rst",
        "title": "Paragraph > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Paragraph.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#math",
        "title": "Math",
        "section": "Math",
        "text": "Bases: _Math\nProvides the math element.\nMath\nMath\n_Math"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#src.pyconverter.xml2py.ast_tree.Math",
        "title": "Math > Math > Math",
        "section": "Math > Math",
        "text": "class src.pyconverter.xml2py.ast_tree.Math(element)\n\nBases: _Math\n\nProvides the math element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#overview",
        "title": "Math > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#import-detail",
        "title": "Math > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#method-detail",
        "title": "Math > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Math",
        "href": "api/src/pyconverter/xml2py/ast_tree/Math.html#Math.to_rst",
        "title": "Math > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Math.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#variablelist",
        "title": "Variablelist",
        "section": "Variablelist",
        "text": "Bases: Element\nProvides the variable list.\nVariablelist\nVariablelist\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#src.pyconverter.xml2py.ast_tree.Variablelist",
        "title": "Variablelist > Variablelist > Variablelist",
        "section": "Variablelist > Variablelist",
        "text": "class src.pyconverter.xml2py.ast_tree.Variablelist(element)\n\nBases: Element\n\nProvides the variable list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#overview",
        "title": "Variablelist > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nterms\nList containing the terms of the element.\nOverview\nto_rst\nterms"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#import-detail",
        "title": "Variablelist > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#property-detail",
        "title": "Variablelist > Property detail",
        "section": "Property detail",
        "text": "List containing the terms of the element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#Variablelist.terms",
        "title": "Variablelist > Property detail > terms",
        "section": "Property detail > terms",
        "text": "property Variablelist.terms\n\nList containing the terms of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#method-detail",
        "title": "Variablelist > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Variablelist",
        "href": "api/src/pyconverter/xml2py/ast_tree/Variablelist.html#Variablelist.to_rst",
        "title": "Variablelist > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Variablelist.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#refsection",
        "title": "RefSection",
        "section": "RefSection",
        "text": "Bases: Element\nProvides the reference section element.\nRefSection\nRefSection\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#src.pyconverter.xml2py.ast_tree.RefSection",
        "title": "RefSection > RefSection > RefSection",
        "section": "RefSection > RefSection",
        "text": "class src.pyconverter.xml2py.ast_tree.RefSection(element, parse_children=True)\n\nBases: Element\n\nProvides the reference section element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#overview",
        "title": "RefSection > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#import-detail",
        "title": "RefSection > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#method-detail",
        "title": "RefSection > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefSection",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefSection.html#RefSection.to_rst",
        "title": "RefSection > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "RefSection.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refclass",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refclass.html#refclass",
        "title": "Refclass",
        "section": "Refclass",
        "text": "Bases: Element\nProvides the base element.\nRefclass\nRefclass\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refclass",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refclass.html#src.pyconverter.xml2py.ast_tree.Refclass",
        "title": "Refclass > Refclass > Refclass",
        "section": "Refclass > Refclass",
        "text": "class src.pyconverter.xml2py.ast_tree.Refclass(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refclass",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refclass.html#import-detail",
        "title": "Refclass > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiIcon",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#guiicon",
        "title": "GuiIcon",
        "section": "GuiIcon",
        "text": "Bases: Element\nProvides the base element.\nGuiIcon\nGuiIcon\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiIcon",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#src.pyconverter.xml2py.ast_tree.GuiIcon",
        "title": "GuiIcon > GuiIcon > GuiIcon",
        "section": "GuiIcon > GuiIcon",
        "text": "class src.pyconverter.xml2py.ast_tree.GuiIcon(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiIcon",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiIcon.html#import-detail",
        "title": "GuiIcon > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout",
        "href": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#literallayout",
        "title": "LiteralLayout",
        "section": "LiteralLayout",
        "text": "Bases: Element\nProvides the base element.\nLiteralLayout\nLiteralLayout\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout",
        "href": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#src.pyconverter.xml2py.ast_tree.LiteralLayout",
        "title": "LiteralLayout > LiteralLayout > LiteralLayout",
        "section": "LiteralLayout > LiteralLayout",
        "text": "class src.pyconverter.xml2py.ast_tree.LiteralLayout(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout",
        "href": "api/src/pyconverter/xml2py/ast_tree/LiteralLayout.html#import-detail",
        "title": "LiteralLayout > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#oxygenxmltree",
        "title": "OxygenXmlTree",
        "section": "OxygenXmlTree",
        "text": "Bases: Element\nProvides for loading an XML file as an AST (abstract syntax tree).\nOxygenXmlTree\nOxygenXmlTree\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#src.pyconverter.xml2py.ast_tree.OxygenXmlTree",
        "title": "OxygenXmlTree > OxygenXmlTree > OxygenXmlTree",
        "section": "OxygenXmlTree > OxygenXmlTree",
        "text": "class src.pyconverter.xml2py.ast_tree.OxygenXmlTree(filename, meta_only=False)\n\nBases: Element\n\nProvides for loading an XML file as an AST (abstract syntax tree).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#overview",
        "title": "OxygenXmlTree > Overview",
        "section": "Overview",
        "text": "xml_filename\nSource filename of the command.\nOverview\nxml_filename"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#import-detail",
        "title": "OxygenXmlTree > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#property-detail",
        "title": "OxygenXmlTree > Property detail",
        "section": "Property detail",
        "text": "Source filename of the command.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree",
        "href": "api/src/pyconverter/xml2py/ast_tree/OxygenXmlTree.html#OxygenXmlTree.xml_filename",
        "title": "OxygenXmlTree > Property detail > xml_filename",
        "section": "Property detail > xml_filename",
        "text": "property OxygenXmlTree.xml_filename\n\nSource filename of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiLabel",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#guilabel",
        "title": "GuiLabel",
        "section": "GuiLabel",
        "text": "Bases: Element\nProvides the GUI label element.\nGuiLabel\nGuiLabel\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiLabel",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#src.pyconverter.xml2py.ast_tree.GuiLabel",
        "title": "GuiLabel > GuiLabel > GuiLabel",
        "section": "GuiLabel > GuiLabel",
        "text": "class src.pyconverter.xml2py.ast_tree.GuiLabel(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI label element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiLabel",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiLabel.html#import-detail",
        "title": "GuiLabel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiButton",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiButton.html#guibutton",
        "title": "GuiButton",
        "section": "GuiButton",
        "text": "Bases: Element\nProvides the base element.\nGuiButton\nGuiButton\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiButton",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiButton.html#src.pyconverter.xml2py.ast_tree.GuiButton",
        "title": "GuiButton > GuiButton > GuiButton",
        "section": "GuiButton > GuiButton",
        "text": "class src.pyconverter.xml2py.ast_tree.GuiButton(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiButton",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiButton.html#import-detail",
        "title": "GuiButton > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect3",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect3.html#refsect3",
        "title": "Refsect3",
        "section": "Refsect3",
        "text": "Bases: Element\nProvides the base element.\nRefsect3\nRefsect3\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect3",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect3.html#src.pyconverter.xml2py.ast_tree.Refsect3",
        "title": "Refsect3 > Refsect3 > Refsect3",
        "section": "Refsect3 > Refsect3",
        "text": "class src.pyconverter.xml2py.ast_tree.Refsect3(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect3",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect3.html#import-detail",
        "title": "Refsect3 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#argument",
        "title": "Argument",
        "section": "Argument",
        "text": "Argument object.\nArgument\nArgument"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#src.pyconverter.xml2py.ast_tree.Argument",
        "title": "Argument > Argument > Argument",
        "section": "Argument > Argument",
        "text": "class src.pyconverter.xml2py.ast_tree.Argument(element: str | Element, initial_argument: List, description: Element | str | None = None)\n\nArgument object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#overview",
        "title": "Argument > Overview",
        "section": "Overview",
        "text": "rec_find\nFind the first type matching a given type string recursively.\nresized_description\nResize the description to a maximum length.\nto_py_docstring\nReturn a list of string to enable converting the element to an RST format.\npy_arg_name\nPython-compatible term.\nis_arg_elipsis\nCheck if the argument is an elipsis.\nmultiple_args\ntypes\nOne or more parameter types.\nOverview\nrec_find\nresized_description\nto_py_docstring\npy_arg_name\nis_arg_elipsis\nmultiple_args\ntypes"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#import-detail",
        "title": "Argument > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#property-detail",
        "title": "Argument > Property detail",
        "section": "Property detail",
        "text": "Python-compatible term.\nCheck if the argument is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nOne or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof).\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.py_arg_name",
        "title": "Argument > Property detail > py_arg_name",
        "section": "Property detail > py_arg_name",
        "text": "property Argument.py_arg_name: str\n\nPython-compatible term.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.is_arg_elipsis",
        "title": "Argument > Property detail > is_arg_elipsis",
        "section": "Property detail > is_arg_elipsis",
        "text": "property Argument.is_arg_elipsis\n\nCheck if the argument is an elipsis.\n\nReturns\n\nbool\n\nTrue if the argument is an elipsis, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.multiple_args",
        "title": "Argument > Property detail > multiple_args",
        "section": "Property detail > multiple_args",
        "text": "property Argument.multiple_args\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.types",
        "title": "Argument > Property detail > types",
        "section": "Property detail > types",
        "text": "property Argument.types: List[type]\n\nOne or more parameter types.\n\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\n\nThis is either a string, float, or integer (or some combination thereof).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#method-detail",
        "title": "Argument > Method detail",
        "section": "Method detail",
        "text": "Find the first type matching a given type string recursively.\nResize the description to a maximum length.\nReturn a list of string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.rec_find",
        "title": "Argument > Method detail > rec_find",
        "section": "Method detail > rec_find",
        "text": "Argument.rec_find(_type: str, terms=None) -> Element | None\n\nFind the first type matching a given type string recursively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.resized_description",
        "title": "Argument > Method detail > resized_description",
        "section": "Method detail > resized_description",
        "text": "Argument.resized_description(description: str | None = None, max_length: int = 100, indent: str = '') -> List[str]\n\nResize the description to a maximum length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Argument",
        "href": "api/src/pyconverter/xml2py/ast_tree/Argument.html#Argument.to_py_docstring",
        "title": "Argument > Method detail > to_py_docstring",
        "section": "Method detail > to_py_docstring",
        "text": "Argument.to_py_docstring(max_length=100, indent='', links=None, base_url=None, fcache=None) -> List[str]\n\nReturn a list of string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Member",
        "href": "api/src/pyconverter/xml2py/ast_tree/Member.html#member",
        "title": "Member",
        "section": "Member",
        "text": "Bases: Element\nProvides the member element for a simple itemized list.\nMember\nMember\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Member",
        "href": "api/src/pyconverter/xml2py/ast_tree/Member.html#src.pyconverter.xml2py.ast_tree.Member",
        "title": "Member > Member > Member",
        "section": "Member > Member",
        "text": "class src.pyconverter.xml2py.ast_tree.Member(element, parse_children=True)\n\nBases: Element\n\nProvides the member element for a simple itemized list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Member",
        "href": "api/src/pyconverter/xml2py/ast_tree/Member.html#import-detail",
        "title": "Member > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#phrase",
        "title": "Phrase",
        "section": "Phrase",
        "text": "Bases: Element\nProvides the phrase element.\nPhrase\nPhrase\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#src.pyconverter.xml2py.ast_tree.Phrase",
        "title": "Phrase > Phrase > Phrase",
        "section": "Phrase > Phrase",
        "text": "class src.pyconverter.xml2py.ast_tree.Phrase(element, parse_children=True)\n\nBases: Element\n\nProvides the phrase element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#overview",
        "title": "Phrase > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#import-detail",
        "title": "Phrase > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#method-detail",
        "title": "Phrase > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Phrase",
        "href": "api/src/pyconverter/xml2py/ast_tree/Phrase.html#Phrase.__repr__",
        "title": "Phrase > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Phrase.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#command",
        "title": "Command",
        "section": "Command",
        "text": "Bases: Element\nProvides the command element.\nCommand\nCommand\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#src.pyconverter.xml2py.ast_tree.Command",
        "title": "Command > Command > Command",
        "section": "Command > Command",
        "text": "class src.pyconverter.xml2py.ast_tree.Command(element, parse_children=True)\n\nBases: Element\n\nProvides the command element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#overview",
        "title": "Command > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ncommand\nName of the command.\ntail_no_args\nTail of the element after removing all its arguments.\nhas_args\nReturn whether the element has arguments.\nargs\nAny terms immediately following the command.\npy_args\nString containing the arguments of the element.\npy_cmd\nPythonic name of the command.\nsphinx_cmd\nString to refer to the Python command with Sphinx.\n__repr__\nOverview\nto_rst\ncommand\ntail_no_args\nhas_args\nargs\npy_args\npy_cmd\nsphinx_cmd\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#import-detail",
        "title": "Command > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#property-detail",
        "title": "Command > Property detail",
        "section": "Property detail",
        "text": "Name of the command.\nTail of the element after removing all its arguments.\nReturn whether the element has arguments.\nAny terms immediately following the command.\nString containing the arguments of the element.\nPythonic name of the command.\nString to refer to the Python command with Sphinx.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.command",
        "title": "Command > Property detail > command",
        "section": "Property detail > command",
        "text": "property Command.command\n\nName of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.tail_no_args",
        "title": "Command > Property detail > tail_no_args",
        "section": "Property detail > tail_no_args",
        "text": "property Command.tail_no_args\n\nTail of the element after removing all its arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.has_args",
        "title": "Command > Property detail > has_args",
        "section": "Property detail > has_args",
        "text": "property Command.has_args\n\nReturn whether the element has arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.args",
        "title": "Command > Property detail > args",
        "section": "Property detail > args",
        "text": "property Command.args\n\nAny terms immediately following the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.py_args",
        "title": "Command > Property detail > py_args",
        "section": "Property detail > py_args",
        "text": "property Command.py_args\n\nString containing the arguments of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.py_cmd",
        "title": "Command > Property detail > py_cmd",
        "section": "Property detail > py_cmd",
        "text": "property Command.py_cmd\n\nPythonic name of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.sphinx_cmd",
        "title": "Command > Property detail > sphinx_cmd",
        "section": "Property detail > sphinx_cmd",
        "text": "property Command.sphinx_cmd\n\nString to refer to the Python command with Sphinx.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#method-detail",
        "title": "Command > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.__repr__",
        "title": "Command > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Command.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Command",
        "href": "api/src/pyconverter/xml2py/ast_tree/Command.html#Command.to_rst",
        "title": "Command > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Command.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Note",
        "href": "api/src/pyconverter/xml2py/ast_tree/Note.html#note",
        "title": "Note",
        "section": "Note",
        "text": "Bases: Element\nProvides the note element.\nNote\nNote\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Note",
        "href": "api/src/pyconverter/xml2py/ast_tree/Note.html#src.pyconverter.xml2py.ast_tree.Note",
        "title": "Note > Note > Note",
        "section": "Note > Note",
        "text": "class src.pyconverter.xml2py.ast_tree.Note(element, parse_children=True)\n\nBases: Element\n\nProvides the note element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Note",
        "href": "api/src/pyconverter/xml2py/ast_tree/Note.html#import-detail",
        "title": "Note > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "The utils package\nutils"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "regex_pattern\nutils\nSummary\nregex_pattern\nutils"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#computeroutput",
        "title": "ComputerOutput",
        "section": "ComputerOutput",
        "text": "Bases: Element\nProvides the computer output element.\nComputerOutput\nComputerOutput\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#src.pyconverter.xml2py.ast_tree.ComputerOutput",
        "title": "ComputerOutput > ComputerOutput > ComputerOutput",
        "section": "ComputerOutput > ComputerOutput",
        "text": "class src.pyconverter.xml2py.ast_tree.ComputerOutput(element, parse_children=True)\n\nBases: Element\n\nProvides the computer output element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#overview",
        "title": "ComputerOutput > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#import-detail",
        "title": "ComputerOutput > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#method-detail",
        "title": "ComputerOutput > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput",
        "href": "api/src/pyconverter/xml2py/ast_tree/ComputerOutput.html#ComputerOutput.to_rst",
        "title": "ComputerOutput > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "ComputerOutput.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Important",
        "href": "api/src/pyconverter/xml2py/ast_tree/Important.html#important",
        "title": "Important",
        "section": "Important",
        "text": "Bases: Element\nProvides the base element.\nImportant\nImportant\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Important",
        "href": "api/src/pyconverter/xml2py/ast_tree/Important.html#src.pyconverter.xml2py.ast_tree.Important",
        "title": "Important > Important > Important",
        "section": "Important > Important",
        "text": "class src.pyconverter.xml2py.ast_tree.Important(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Important",
        "href": "api/src/pyconverter/xml2py/ast_tree/Important.html#import-detail",
        "title": "Important > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#varlistentry",
        "title": "VarlistEntry",
        "section": "VarlistEntry",
        "text": "Bases: Element\nProvides the variable list entry element.\nVarlistEntry\nVarlistEntry\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#src.pyconverter.xml2py.ast_tree.VarlistEntry",
        "title": "VarlistEntry > VarlistEntry > VarlistEntry",
        "section": "VarlistEntry > VarlistEntry",
        "text": "class src.pyconverter.xml2py.ast_tree.VarlistEntry(element, parse_children=True)\n\nBases: Element\n\nProvides the variable list entry element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#overview",
        "title": "VarlistEntry > Overview",
        "section": "Overview",
        "text": "py_term\nPython-compatible term.\npy_text\nRemove mention of graphical interaction.\nto_rst\nReturn a string to enable converting the element to an RST format.\nparm_types\nOne or more parameter types.\nterm\nTerm of the element.\ntext\nText of the element.\nactive\nReturn if this argument is active.\nis_arg\nReturn True when this variable list is for an argument.\n__repr__\nOverview\npy_term\npy_text\nto_rst\nparm_types\nterm\ntext\nactive\nis_arg\nTrue\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#import-detail",
        "title": "VarlistEntry > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#property-detail",
        "title": "VarlistEntry > Property detail",
        "section": "Property detail",
        "text": "One or more parameter types.\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\nThis is either a string, float, or integer (or some combination thereof).\nTerm of the element.\nText of the element.\nReturn if this argument is active.\nReturn True when this variable list is for an argument.\nProperty detail\nTrue"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.parm_types",
        "title": "VarlistEntry > Property detail > parm_types",
        "section": "Property detail > parm_types",
        "text": "property VarlistEntry.parm_types\n\nOne or more parameter types.\n\nThis is guessed from any subvarlists. If unavailable, then it’s guessed\nfrom the description of the variable.\n\nThis is either a string, float, or integer (or some combination thereof).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.term",
        "title": "VarlistEntry > Property detail > term",
        "section": "Property detail > term",
        "text": "property VarlistEntry.term\n\nTerm of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.text",
        "title": "VarlistEntry > Property detail > text",
        "section": "Property detail > text",
        "text": "property VarlistEntry.text\n\nText of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.active",
        "title": "VarlistEntry > Property detail > active",
        "section": "Property detail > active",
        "text": "property VarlistEntry.active\n\nReturn if this argument is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.is_arg",
        "title": "VarlistEntry > Property detail > is_arg",
        "section": "Property detail > is_arg",
        "text": "property VarlistEntry.is_arg\n\nReturn True when this variable list is for an argument.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#method-detail",
        "title": "VarlistEntry > Method detail",
        "section": "Method detail",
        "text": "Python-compatible term.\nRemove mention of graphical interaction.\nReturn a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.py_term",
        "title": "VarlistEntry > Method detail > py_term",
        "section": "Method detail > py_term",
        "text": "VarlistEntry.py_term(links=None, base_url=None)\n\nPython-compatible term.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.__repr__",
        "title": "VarlistEntry > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "VarlistEntry.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.py_text",
        "title": "VarlistEntry > Method detail > py_text",
        "section": "Method detail > py_text",
        "text": "VarlistEntry.py_text(links=None, base_url=None, fcache=None)\n\nRemove mention of graphical interaction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry",
        "href": "api/src/pyconverter/xml2py/ast_tree/VarlistEntry.html#VarlistEntry.to_rst",
        "title": "VarlistEntry > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "VarlistEntry.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Formalpara",
        "href": "api/src/pyconverter/xml2py/ast_tree/Formalpara.html#formalpara",
        "title": "Formalpara",
        "section": "Formalpara",
        "text": "Bases: Element\nProvides the base element.\nFormalpara\nFormalpara\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Formalpara",
        "href": "api/src/pyconverter/xml2py/ast_tree/Formalpara.html#src.pyconverter.xml2py.ast_tree.Formalpara",
        "title": "Formalpara > Formalpara > Formalpara",
        "section": "Formalpara > Formalpara",
        "text": "class src.pyconverter.xml2py.ast_tree.Formalpara(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Formalpara",
        "href": "api/src/pyconverter/xml2py/ast_tree/Formalpara.html#import-detail",
        "title": "Formalpara > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#the-load_xml_docpy-module",
        "title": "The load_xml_doc.py module",
        "section": "The load_xml_doc.py module",
        "text": "The load_xml_doc.py module\nload_xml_doc.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#summary",
        "title": "The load_xml_doc.py module > Summary",
        "section": "Summary",
        "text": "load_links\nLoad all links.\nload_fcache\nLoad all graphics and cache the base name without the extension.\nload_docu_global\nLoad all global documents.\nload_terms\nLoad all needed terms.\nSummary\nload_links\nload_fcache\nload_docu_global\nload_terms"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#module-detail",
        "title": "The load_xml_doc.py module > Module detail",
        "section": "Module detail",
        "text": "Load all links.\nPath to the links directory.\nDictionary containing the link names and the needed information to render the links.\nLoad all graphics and cache the base name without the extension.\nPath object of the graphic directory.\nDictionary containing the base names of the graphics and their path.\nLoad all global documents.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nLoad all needed terms.\nPath object of the terms directory.\nDictionary containing the entity names from the documentation and their path.\nDictionary containing the link names and the needed information to render the links.\nDictionary containing the base names of the graphics and their path.\nName of the file containing the variable terms to import.\nThe default value is \"build_variables.ent\".\nName of the file containing the global terms to import.\nThe default is \"terms_global.ent\".\nName of the file containing the manual entities to import.\nThe default is \"manuals.ent\".\nName of the directory containg the entities for the special characters.\nThe default is \"ent\".\nDictionary containing the entity names and their values.\nObject containing the version variables of the XML documentation.\nModule detail\npython:dict\npython:dict\npython:dict\n\"build_variables.ent\"\n\"terms_global.ent\"\n\"manuals.ent\"\n\"ent\"\npython:dict\nAutogenerateddirectory"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#load_xml_doc.load_links",
        "title": "The load_xml_doc.py module > Module detail > load_links",
        "section": "Module detail > load_links",
        "text": "load_xml_doc.load_links(link_path: pathlib.Path) -> dict\n\nLoad all links.\n\nParameters\n\nlink_path: Path\n\nPath to the links directory.\n\nReturns\n\npython:dict\n\nDictionary containing the link names and the needed information to render the links.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#load_xml_doc.load_fcache",
        "title": "The load_xml_doc.py module > Module detail > load_fcache",
        "section": "Module detail > load_fcache",
        "text": "load_xml_doc.load_fcache(graph_path: pathlib.Path) -> dict\n\nLoad all graphics and cache the base name without the extension.\n\nParameters\n\ngraph_path: Path\n\nPath object of the graphic directory.\n\nReturns\n\npython:dict\n\nDictionary containing the base names of the graphics and their path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#load_xml_doc.load_docu_global",
        "title": "The load_xml_doc.py module > Module detail > load_docu_global",
        "section": "Module detail > load_docu_global",
        "text": "load_xml_doc.load_docu_global(term_path: pathlib.Path) -> dict\n\nLoad all global documents.\n\nParameters\n\nterm_path: Path\n\nPath object of the terms directory.\n\nReturns\n\npython:dict\n\nDictionary containing the entity names from the documentation and their path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/load_xml_doc/index",
        "href": "api/src/pyconverter/xml2py/load_xml_doc/index.html#load_xml_doc.load_terms",
        "title": "The load_xml_doc.py module > Module detail > load_terms",
        "section": "Module detail > load_terms",
        "text": "load_xml_doc.load_terms(term_path: pathlib.Path, docu_global: dict, links: dict, fcache: dict, variable_file: str = 'build_variables.ent', global_terms_file: str = 'terms_global.ent', manual_file: str = 'manuals.ent', group_code_file: str = '../xml/ansys.groupcodes.commands.ent', character_directory: str = 'ent') -> Tuple[dict, pyconverter.xml2py.version_variables.Autogenerateddirectory]\n\nLoad all needed terms.\n\nParameters\n\nterm_path: Path\n\nPath object of the terms directory.\n\ndocu_global: dict\n\nDictionary containing the entity names from the documentation and their path.\n\nlinks: dict\n\nDictionary containing the link names and the needed information to render the links.\n\nfcache: dict\n\nDictionary containing the base names of the graphics and their path.\n\nvariable_file: str, optional\n\nName of the file containing the variable terms to import.\nThe default value is \"build_variables.ent\".\n\nglobal_terms_file: str, optional\n\nName of the file containing the global terms to import.\nThe default is \"terms_global.ent\".\n\nmanual_file: str, optional\n\nName of the file containing the manual entities to import.\nThe default is \"manuals.ent\".\n\ncharacter_directory: str, optional\n\nName of the directory containg the entities for the special characters.\nThe default is \"ent\".\n\nReturns\n\npython:dict\n\nDictionary containing the entity names and their values.\n\nAutogenerateddirectory\n\nObject containing the version variables of the XML documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#refmeta",
        "title": "RefMeta",
        "section": "RefMeta",
        "text": "Bases: Element\nProvides the reference metadata element.\nRefMeta\nRefMeta\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#src.pyconverter.xml2py.ast_tree.RefMeta",
        "title": "RefMeta > RefMeta > RefMeta",
        "section": "RefMeta > RefMeta",
        "text": "class src.pyconverter.xml2py.ast_tree.RefMeta(element, parse_children=True)\n\nBases: Element\n\nProvides the reference metadata element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#overview",
        "title": "RefMeta > Overview",
        "section": "Overview",
        "text": "refentry_title\nTitle of the referency entry.\nOverview\nrefentry_title"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#import-detail",
        "title": "RefMeta > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#property-detail",
        "title": "RefMeta > Property detail",
        "section": "Property detail",
        "text": "Title of the referency entry.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/RefMeta",
        "href": "api/src/pyconverter/xml2py/ast_tree/RefMeta.html#RefMeta.refentry_title",
        "title": "RefMeta > Property detail > refentry_title",
        "section": "Property detail > refentry_title",
        "text": "property RefMeta.refentry_title\n\nTitle of the referency entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect1.html#refsect1",
        "title": "Refsect1",
        "section": "Refsect1",
        "text": "Bases: Element\nProvides the base element.\nRefsect1\nRefsect1\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect1.html#src.pyconverter.xml2py.ast_tree.Refsect1",
        "title": "Refsect1 > Refsect1 > Refsect1",
        "section": "Refsect1 > Refsect1",
        "text": "class src.pyconverter.xml2py.ast_tree.Refsect1(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsect1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsect1.html#import-detail",
        "title": "Refsect1 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Markup",
        "href": "api/src/pyconverter/xml2py/ast_tree/Markup.html#markup",
        "title": "Markup",
        "section": "Markup",
        "text": "Bases: Element\nProvides the base element.\nMarkup\nMarkup\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Markup",
        "href": "api/src/pyconverter/xml2py/ast_tree/Markup.html#src.pyconverter.xml2py.ast_tree.Markup",
        "title": "Markup > Markup > Markup",
        "section": "Markup > Markup",
        "text": "class src.pyconverter.xml2py.ast_tree.Markup(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Markup",
        "href": "api/src/pyconverter/xml2py/ast_tree/Markup.html#import-detail",
        "title": "Markup > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Option",
        "href": "api/src/pyconverter/xml2py/ast_tree/Option.html#option",
        "title": "Option",
        "section": "Option",
        "text": "Bases: Element\nProvides the base element.\nOption\nOption\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Option",
        "href": "api/src/pyconverter/xml2py/ast_tree/Option.html#src.pyconverter.xml2py.ast_tree.Option",
        "title": "Option > Option > Option",
        "section": "Option > Option",
        "text": "class src.pyconverter.xml2py.ast_tree.Option(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Option",
        "href": "api/src/pyconverter/xml2py/ast_tree/Option.html#import-detail",
        "title": "Option > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#quote",
        "title": "Quote",
        "section": "Quote",
        "text": "Bases: Element\nProvides the quote element.\nQuote\nQuote\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#src.pyconverter.xml2py.ast_tree.Quote",
        "title": "Quote > Quote > Quote",
        "section": "Quote > Quote",
        "text": "class src.pyconverter.xml2py.ast_tree.Quote(element)\n\nBases: Element\n\nProvides the quote element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#overview",
        "title": "Quote > Overview",
        "section": "Overview",
        "text": "quote\nQuote value.\n__repr__\nOverview\nquote\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#import-detail",
        "title": "Quote > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#property-detail",
        "title": "Quote > Property detail",
        "section": "Property detail",
        "text": "Quote value.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#Quote.quote",
        "title": "Quote > Property detail > quote",
        "section": "Property detail > quote",
        "text": "property Quote.quote\n\nQuote value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#method-detail",
        "title": "Quote > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Quote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Quote.html#Quote.__repr__",
        "title": "Quote > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Quote.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ULink",
        "href": "api/src/pyconverter/xml2py/ast_tree/ULink.html#ulink",
        "title": "ULink",
        "section": "ULink",
        "text": "Bases: Element\nProvides the base element.\nULink\nULink\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ULink",
        "href": "api/src/pyconverter/xml2py/ast_tree/ULink.html#src.pyconverter.xml2py.ast_tree.ULink",
        "title": "ULink > ULink > ULink",
        "section": "ULink > ULink",
        "text": "class src.pyconverter.xml2py.ast_tree.ULink(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ULink",
        "href": "api/src/pyconverter/xml2py/ast_tree/ULink.html#import-detail",
        "title": "ULink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Highlights",
        "href": "api/src/pyconverter/xml2py/ast_tree/Highlights.html#highlights",
        "title": "Highlights",
        "section": "Highlights",
        "text": "Bases: Element\nProvides the base element.\nHighlights\nHighlights\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Highlights",
        "href": "api/src/pyconverter/xml2py/ast_tree/Highlights.html#src.pyconverter.xml2py.ast_tree.Highlights",
        "title": "Highlights > Highlights > Highlights",
        "section": "Highlights > Highlights",
        "text": "class src.pyconverter.xml2py.ast_tree.Highlights(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Highlights",
        "href": "api/src/pyconverter/xml2py/ast_tree/Highlights.html#import-detail",
        "title": "Highlights > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SegTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/SegTitle.html#segtitle",
        "title": "SegTitle",
        "section": "SegTitle",
        "text": "Bases: Element\nProvides the base element.\nSegTitle\nSegTitle\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SegTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/SegTitle.html#src.pyconverter.xml2py.ast_tree.SegTitle",
        "title": "SegTitle > SegTitle > SegTitle",
        "section": "SegTitle > SegTitle",
        "text": "class src.pyconverter.xml2py.ast_tree.SegTitle(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SegTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/SegTitle.html#import-detail",
        "title": "SegTitle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#simplelist",
        "title": "SimpleList",
        "section": "SimpleList",
        "text": "Bases: ItemizedList\nProvides the simple itemized list element.\nSimpleList\nSimpleList\nItemizedList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#src.pyconverter.xml2py.ast_tree.SimpleList",
        "title": "SimpleList > SimpleList > SimpleList",
        "section": "SimpleList > SimpleList",
        "text": "class src.pyconverter.xml2py.ast_tree.SimpleList(element, parse_children=True)\n\nBases: ItemizedList\n\nProvides the simple itemized list element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#overview",
        "title": "SimpleList > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#import-detail",
        "title": "SimpleList > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#method-detail",
        "title": "SimpleList > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SimpleList",
        "href": "api/src/pyconverter/xml2py/ast_tree/SimpleList.html#SimpleList.__repr__",
        "title": "SimpleList > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "SimpleList.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#chapter",
        "title": "Chapter",
        "section": "Chapter",
        "text": "Bases: Element\nProvides the chapter element.\nChapter\nChapter\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#src.pyconverter.xml2py.ast_tree.Chapter",
        "title": "Chapter > Chapter > Chapter",
        "section": "Chapter > Chapter",
        "text": "class src.pyconverter.xml2py.ast_tree.Chapter(element, parse_children=True)\n\nBases: Element\n\nProvides the chapter element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#overview",
        "title": "Chapter > Overview",
        "section": "Overview",
        "text": "helpstring\nValue for the helpstring parameter contained in the chapter element.\n__repr__\nOverview\nhelpstring\nhelpstring\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#import-detail",
        "title": "Chapter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#property-detail",
        "title": "Chapter > Property detail",
        "section": "Property detail",
        "text": "Value for the helpstring parameter contained in the chapter element.\nProperty detail\nhelpstring"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#Chapter.helpstring",
        "title": "Chapter > Property detail > helpstring",
        "section": "Property detail > helpstring",
        "text": "property Chapter.helpstring\n\nValue for the helpstring parameter contained in the chapter element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#method-detail",
        "title": "Chapter > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Chapter",
        "href": "api/src/pyconverter/xml2py/ast_tree/Chapter.html#Chapter.__repr__",
        "title": "Chapter > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Chapter.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Interface",
        "href": "api/src/pyconverter/xml2py/ast_tree/Interface.html#interface",
        "title": "Interface",
        "section": "Interface",
        "text": "Bases: Element\nProvides the base element.\nInterface\nInterface\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Interface",
        "href": "api/src/pyconverter/xml2py/ast_tree/Interface.html#src.pyconverter.xml2py.ast_tree.Interface",
        "title": "Interface > Interface > Interface",
        "section": "Interface > Interface",
        "text": "class src.pyconverter.xml2py.ast_tree.Interface(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Interface",
        "href": "api/src/pyconverter/xml2py/ast_tree/Interface.html#import-detail",
        "title": "Interface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Section1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Section1.html#section1",
        "title": "Section1",
        "section": "Section1",
        "text": "Bases: Element\nProvides the base element.\nSection1\nSection1\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Section1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Section1.html#src.pyconverter.xml2py.ast_tree.Section1",
        "title": "Section1 > Section1 > Section1",
        "section": "Section1 > Section1",
        "text": "class src.pyconverter.xml2py.ast_tree.Section1(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Section1",
        "href": "api/src/pyconverter/xml2py/ast_tree/Section1.html#import-detail",
        "title": "Section1 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#the-clipy-module",
        "title": "The cli.py module",
        "section": "The cli.py module",
        "text": "The cli.py module\ncli.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#summary",
        "title": "The cli.py module > Summary",
        "section": "Summary",
        "text": "create_package\nCreate Python package based on a XML documentation.\nmain\nA Python wrapper to convert XML documentation into Python source code\nversion\nDisplay current version.\npackage\nCreate a Python package from your XML documentation.\nSummary\ncreate_package\nmain\nversion\npackage"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#description",
        "title": "The cli.py module > Description",
        "section": "Description",
        "text": "Command Line Interface for PyConverter-XML2Py.\nDescription"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#module-detail",
        "title": "The cli.py module > Module detail",
        "section": "Module detail",
        "text": "Create Python package based on a XML documentation.\nPath to the directory that contains the XML documentation to convert.\nPath to the directory where you want to create the autogenerated package.\nThe default value is the current working directory.\nPath for the template to use. If no path is provided, the default template is used.\nThe default value is the _package directory accessible in the\nPyConverter-XML2Py GitHub repository.\nPath to the directory that contains the functions that need to be customized.\nThe default value is None.\nWhether to run pre-commit hooks on the autogenerated package source code.\nThe default value is False.\nMaximum length of the generated docstrings.\nThe default is 100.\nA Python wrapper to convert XML documentation into Python source code\nwith its related Sphinx documentation.\nDisplay current version.\nCreate a Python package from your XML documentation.\nModule detail\n_package\nFalse\n100"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#cli.create_package",
        "title": "The cli.py module > Module detail > create_package",
        "section": "Module detail > create_package",
        "text": "cli.create_package(xml_path: pathlib.Path | None = None, target_path: pathlib.Path | None = None, template_path: pathlib.Path | None = None, custom_functions_path: pathlib.Path | None = None, run_pre_commit: bool = False, max_docstring_length: int = 100) -> None\n\nCreate Python package based on a XML documentation.\n\nParameters\n\nxml_path: str or Path\n\nPath to the directory that contains the XML documentation to convert.\n\ntarget_path: str or Path, optional\n\nPath to the directory where you want to create the autogenerated package.\nThe default value is the current working directory.\n\ntemplate_path: str or Path, optional\n\nPath for the template to use. If no path is provided, the default template is used.\nThe default value is the _package directory accessible in the\nPyConverter-XML2Py GitHub repository.\n\ncustom_functions_path: str or Path, optional\n\nPath to the directory that contains the functions that need to be customized.\nThe default value is None.\n\nrun_pre_commit: bool, optional\n\nWhether to run pre-commit hooks on the autogenerated package source code.\nThe default value is False.\n\nmax_docstring_length: int, optional\n\nMaximum length of the generated docstrings.\nThe default is 100.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#cli.main",
        "title": "The cli.py module > Module detail > main",
        "section": "Module detail > main",
        "text": "cli.main()\n\nA Python wrapper to convert XML documentation into Python source code\nwith its related Sphinx documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#cli.version",
        "title": "The cli.py module > Module detail > version",
        "section": "Module detail > version",
        "text": "cli.version()\n\nDisplay current version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/cli/index",
        "href": "api/src/pyconverter/xml2py/cli/index.html#cli.package",
        "title": "The cli.py module > Module detail > package",
        "section": "Module detail > package",
        "text": "cli.package(xml_path: pathlib.Path, targ_path: pathlib.Path, template_path: pathlib.Path, func_path: pathlib.Path, run_pre_commit: bool, max_length: int) -> None\n\nCreate a Python package from your XML documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#itemizedlist",
        "title": "ItemizedList",
        "section": "ItemizedList",
        "text": "Bases: Element\nProvides the itemized list element.\nItemizedList\nItemizedList\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#src.pyconverter.xml2py.ast_tree.ItemizedList",
        "title": "ItemizedList > ItemizedList > ItemizedList",
        "section": "ItemizedList > ItemizedList",
        "text": "class src.pyconverter.xml2py.ast_tree.ItemizedList(element, parse_children=True)\n\nBases: Element\n\nProvides the itemized list element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#overview",
        "title": "ItemizedList > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nOverview\nto_rst\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#import-detail",
        "title": "ItemizedList > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#method-detail",
        "title": "ItemizedList > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#ItemizedList.__repr__",
        "title": "ItemizedList > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "ItemizedList.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ItemizedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ItemizedList.html#ItemizedList.to_rst",
        "title": "ItemizedList > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "ItemizedList.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#autogenerateddirectory",
        "title": "Autogenerateddirectory",
        "section": "Autogenerateddirectory",
        "text": "Contains the version variables of the XML documentation.\nAutogenerateddirectory\nAutogenerateddirectory"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#src.pyconverter.xml2py.version_variables.Autogenerateddirectory",
        "title": "Autogenerateddirectory > Autogenerateddirectory > Autogenerateddirectory",
        "section": "Autogenerateddirectory > Autogenerateddirectory",
        "text": "class src.pyconverter.xml2py.version_variables.Autogenerateddirectory(terms: dict)\n\nContains the version variables of the XML documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#overview",
        "title": "Autogenerateddirectory > Overview",
        "section": "Overview",
        "text": "autogenerated_directory_name\nAutogenerated directory name.\nversion\nVersion of the XML documentation.\nbase_url\nBase URL of the HTML documentation.\ncmd_base_url\nCommand base URL.\nOverview\nautogenerated_directory_name\nversion\nbase_url\ncmd_base_url"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#import-detail",
        "title": "Autogenerateddirectory > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#property-detail",
        "title": "Autogenerateddirectory > Property detail",
        "section": "Property detail",
        "text": "Autogenerated directory name.\nVersion of the XML documentation.\nBase URL of the HTML documentation.\nCommand base URL.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#Autogenerateddirectory.autogenerated_directory_name",
        "title": "Autogenerateddirectory > Property detail > autogenerated_directory_name",
        "section": "Property detail > autogenerated_directory_name",
        "text": "property Autogenerateddirectory.autogenerated_directory_name: str\n\nAutogenerated directory name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#Autogenerateddirectory.version",
        "title": "Autogenerateddirectory > Property detail > version",
        "section": "Property detail > version",
        "text": "property Autogenerateddirectory.version: str\n\nVersion of the XML documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#Autogenerateddirectory.base_url",
        "title": "Autogenerateddirectory > Property detail > base_url",
        "section": "Property detail > base_url",
        "text": "property Autogenerateddirectory.base_url: str\n\nBase URL of the HTML documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory",
        "href": "api/src/pyconverter/xml2py/version_variables/Autogenerateddirectory.html#Autogenerateddirectory.cmd_base_url",
        "title": "Autogenerateddirectory > Property detail > cmd_base_url",
        "section": "Property detail > cmd_base_url",
        "text": "property Autogenerateddirectory.cmd_base_url: str\n\nCommand base URL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#informalequation",
        "title": "InformalEquation",
        "section": "InformalEquation",
        "text": "Bases: Element\nProvides the base element.\nInformalEquation\nInformalEquation\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#src.pyconverter.xml2py.ast_tree.InformalEquation",
        "title": "InformalEquation > InformalEquation > InformalEquation",
        "section": "InformalEquation > InformalEquation",
        "text": "class src.pyconverter.xml2py.ast_tree.InformalEquation(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalEquation.html#import-detail",
        "title": "InformalEquation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#refpurpose",
        "title": "Refpurpose",
        "section": "Refpurpose",
        "text": "Bases: Element\nProvides the refpurpose element, which contains\na short synopsis of a reference.\nRefpurpose\nRefpurpose\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#src.pyconverter.xml2py.ast_tree.Refpurpose",
        "title": "Refpurpose > Refpurpose > Refpurpose",
        "section": "Refpurpose > Refpurpose",
        "text": "class src.pyconverter.xml2py.ast_tree.Refpurpose(element, parse_children=True)\n\nBases: Element\n\nProvides the refpurpose element, which contains\na short synopsis of a reference.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#overview",
        "title": "Refpurpose > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#import-detail",
        "title": "Refpurpose > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#method-detail",
        "title": "Refpurpose > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refpurpose",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refpurpose.html#Refpurpose.__repr__",
        "title": "Refpurpose > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Refpurpose.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Code",
        "href": "api/src/pyconverter/xml2py/ast_tree/Code.html#code",
        "title": "Code",
        "section": "Code",
        "text": "Bases: Element\nProvides the code element.\nCode\nCode\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Code",
        "href": "api/src/pyconverter/xml2py/ast_tree/Code.html#src.pyconverter.xml2py.ast_tree.Code",
        "title": "Code > Code > Code",
        "section": "Code > Code",
        "text": "class src.pyconverter.xml2py.ast_tree.Code(element, parse_children=True)\n\nBases: Element\n\nProvides the code element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Code",
        "href": "api/src/pyconverter/xml2py/ast_tree/Code.html#import-detail",
        "title": "Code > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#the-directory_formatpy-module",
        "title": "The directory_format.py module",
        "section": "The directory_format.py module",
        "text": "The directory_format.py module\ndirectory_format.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#summary",
        "title": "The directory_format.py module > Summary",
        "section": "Summary",
        "text": "get_paths\nGet the paths to the directories needed for the conversion.\nSummary\nget_paths"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#module-detail",
        "title": "The directory_format.py module > Module detail",
        "section": "Module detail",
        "text": "Get the paths to the directories needed for the conversion.\nPath object of the directory with the predefined format.\nPath object of the directory containing the graphics. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the links. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the terms. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the XML files. The default is None,\nin which case the XML predefined directory format is used.\nPath object of the directory containing the graphics.\nPath object of the directory containing the links.\nPath object of the directory containing the terms.\nPath object of the directory containing the XML files.\nModule detail\nNone\nNone\nNone\nNone\nPath\nPath\nPath\nPath"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/directory_format/index",
        "href": "api/src/pyconverter/xml2py/directory_format/index.html#directory_format.get_paths",
        "title": "The directory_format.py module > Module detail > get_paths",
        "section": "Module detail > get_paths",
        "text": "directory_format.get_paths(path: pathlib.Path, graph_path: pathlib.Path | None = None, link_path: pathlib.Path | None = None, term_path: pathlib.Path | None = None, xml_path: pathlib.Path | None = None) -> Tuple[pathlib.Path, pathlib.Path, pathlib.Path, pathlib.Path]\n\nGet the paths to the directories needed for the conversion.\n\nParameters\n\npath: Path\n\nPath object of the directory with the predefined format.\n\ngraph_path: Path, optional\n\nPath object of the directory containing the graphics. The default is None,\nin which case the XML predefined directory format is used.\n\nlink_path: Path, optional\n\nPath object of the directory containing the links. The default is None,\nin which case the XML predefined directory format is used.\n\nterm_path: Path, optional\n\nPath object of the directory containing the terms. The default is None,\nin which case the XML predefined directory format is used.\n\nxml_path: Path, optional\n\nPath object of the directory containing the XML files. The default is None,\nin which case the XML predefined directory format is used.\n\nReturns\n\nPath\n\nPath object of the directory containing the graphics.\n\nPath\n\nPath object of the directory containing the links.\n\nPath\n\nPath object of the directory containing the terms.\n\nPath\n\nPath object of the directory containing the XML files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#refname",
        "title": "Refname",
        "section": "Refname",
        "text": "Bases: Element\nProvides the refname element which contains\nthe name of a reference.\nRefname\nRefname\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#src.pyconverter.xml2py.ast_tree.Refname",
        "title": "Refname > Refname > Refname",
        "section": "Refname > Refname",
        "text": "class src.pyconverter.xml2py.ast_tree.Refname(element, terms=None)\n\nBases: Element\n\nProvides the refname element which contains\nthe name of a reference.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#overview",
        "title": "Refname > Overview",
        "section": "Overview",
        "text": "terms\nTerms of the element.\nraw_args\nRaws containing the command arguments.\nargs\nCommand arguments.\nOverview\nterms\nraw_args\nargs"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#import-detail",
        "title": "Refname > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#property-detail",
        "title": "Refname > Property detail",
        "section": "Property detail",
        "text": "Terms of the element.\nRaws containing the command arguments.\nCommand arguments.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#Refname.terms",
        "title": "Refname > Property detail > terms",
        "section": "Property detail > terms",
        "text": "property Refname.terms\n\nTerms of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#Refname.raw_args",
        "title": "Refname > Property detail > raw_args",
        "section": "Property detail > raw_args",
        "text": "property Refname.raw_args\n\nRaws containing the command arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refname.html#Refname.args",
        "title": "Refname > Property detail > args",
        "section": "Property detail > args",
        "text": "property Refname.args\n\nCommand arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#caution",
        "title": "Caution",
        "section": "Caution",
        "text": "Bases: Element\nProvides the caution element.\nCaution\nCaution\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#src.pyconverter.xml2py.ast_tree.Caution",
        "title": "Caution > Caution > Caution",
        "section": "Caution > Caution",
        "text": "class src.pyconverter.xml2py.ast_tree.Caution(element, parse_children=True)\n\nBases: Element\n\nProvides the caution element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#overview",
        "title": "Caution > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#import-detail",
        "title": "Caution > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#method-detail",
        "title": "Caution > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Caution",
        "href": "api/src/pyconverter/xml2py/ast_tree/Caution.html#Caution.to_rst",
        "title": "Caution > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Caution.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/CiteTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#citetitle",
        "title": "CiteTitle",
        "section": "CiteTitle",
        "text": "Bases: Element\nProvides the base element.\nCiteTitle\nCiteTitle\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/CiteTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#src.pyconverter.xml2py.ast_tree.CiteTitle",
        "title": "CiteTitle > CiteTitle > CiteTitle",
        "section": "CiteTitle > CiteTitle",
        "text": "class src.pyconverter.xml2py.ast_tree.CiteTitle(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/CiteTitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/CiteTitle.html#import-detail",
        "title": "CiteTitle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#namemap",
        "title": "NameMap",
        "section": "NameMap",
        "text": "NameMap\nNameMap"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#src.pyconverter.xml2py.ast_tree.NameMap",
        "title": "NameMap > NameMap > NameMap",
        "section": "NameMap > NameMap",
        "text": "class src.pyconverter.xml2py.ast_tree.NameMap(name_map)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#overview",
        "title": "NameMap > Overview",
        "section": "Overview",
        "text": "name_map\nOverview\nname_map"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#import-detail",
        "title": "NameMap > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#attribute-detail",
        "title": "NameMap > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/NameMap",
        "href": "api/src/pyconverter/xml2py/ast_tree/NameMap.html#NameMap.name_map",
        "title": "NameMap > Attribute detail > name_map",
        "section": "Attribute detail > name_map",
        "text": "NameMap.name_map\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#refentrytitle",
        "title": "Refentrytitle",
        "section": "Refentrytitle",
        "text": "Bases: Element\nProvides the title of the reference entry.\nRefentrytitle\nRefentrytitle\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#src.pyconverter.xml2py.ast_tree.Refentrytitle",
        "title": "Refentrytitle > Refentrytitle > Refentrytitle",
        "section": "Refentrytitle > Refentrytitle",
        "text": "class src.pyconverter.xml2py.ast_tree.Refentrytitle(element, parse_children=True)\n\nBases: Element\n\nProvides the title of the reference entry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#overview",
        "title": "Refentrytitle > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#import-detail",
        "title": "Refentrytitle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#method-detail",
        "title": "Refentrytitle > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refentrytitle.html#Refentrytitle.__repr__",
        "title": "Refentrytitle > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Refentrytitle.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#entry",
        "title": "Entry",
        "section": "Entry",
        "text": "Bases: Element\nProvides the entry element.\nEntry\nEntry\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#src.pyconverter.xml2py.ast_tree.Entry",
        "title": "Entry > Entry > Entry",
        "section": "Entry > Entry",
        "text": "class src.pyconverter.xml2py.ast_tree.Entry(element, parse_children=True)\n\nBases: Element\n\nProvides the entry element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#overview",
        "title": "Entry > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nmorerows\nValue for the morerows parameter contained in the entry element.\nOverview\nto_rst\nmorerows\nmorerows"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#import-detail",
        "title": "Entry > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#property-detail",
        "title": "Entry > Property detail",
        "section": "Property detail",
        "text": "Value for the morerows parameter contained in the entry element.\nProperty detail\nmorerows"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#Entry.morerows",
        "title": "Entry > Property detail > morerows",
        "section": "Property detail > morerows",
        "text": "property Entry.morerows\n\nValue for the morerows parameter contained in the entry element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#method-detail",
        "title": "Entry > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Entry",
        "href": "api/src/pyconverter/xml2py/ast_tree/Entry.html#Entry.to_rst",
        "title": "Entry > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Entry.to_rst(indent='', links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Function",
        "href": "api/src/pyconverter/xml2py/ast_tree/Function.html#function",
        "title": "Function",
        "section": "Function",
        "text": "Bases: Element\nProvides the function element.\nFunction\nFunction\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Function",
        "href": "api/src/pyconverter/xml2py/ast_tree/Function.html#src.pyconverter.xml2py.ast_tree.Function",
        "title": "Function > Function > Function",
        "section": "Function > Function",
        "text": "class src.pyconverter.xml2py.ast_tree.Function(element, parse_children=True)\n\nBases: Element\n\nProvides the function element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Function",
        "href": "api/src/pyconverter/xml2py/ast_tree/Function.html#import-detail",
        "title": "Function > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Primary",
        "href": "api/src/pyconverter/xml2py/ast_tree/Primary.html#primary",
        "title": "Primary",
        "section": "Primary",
        "text": "Bases: Element\nProvides the primary element.\nPrimary\nPrimary\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Primary",
        "href": "api/src/pyconverter/xml2py/ast_tree/Primary.html#src.pyconverter.xml2py.ast_tree.Primary",
        "title": "Primary > Primary > Primary",
        "section": "Primary > Primary",
        "text": "class src.pyconverter.xml2py.ast_tree.Primary(element, parse_children=True)\n\nBases: Element\n\nProvides the primary element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Primary",
        "href": "api/src/pyconverter/xml2py/ast_tree/Primary.html#import-detail",
        "title": "Primary > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#refsynopsisdiv",
        "title": "Refsynopsisdiv",
        "section": "Refsynopsisdiv",
        "text": "Bases: Element\nProvides the base element.\nRefsynopsisdiv\nRefsynopsisdiv\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#src.pyconverter.xml2py.ast_tree.Refsynopsisdiv",
        "title": "Refsynopsisdiv > Refsynopsisdiv > Refsynopsisdiv",
        "section": "Refsynopsisdiv > Refsynopsisdiv",
        "text": "class src.pyconverter.xml2py.ast_tree.Refsynopsisdiv(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refsynopsisdiv.html#import-detail",
        "title": "Refsynopsisdiv > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/UserInput",
        "href": "api/src/pyconverter/xml2py/ast_tree/UserInput.html#userinput",
        "title": "UserInput",
        "section": "UserInput",
        "text": "Bases: Element\nProvides the user input element.\nUserInput\nUserInput\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/UserInput",
        "href": "api/src/pyconverter/xml2py/ast_tree/UserInput.html#src.pyconverter.xml2py.ast_tree.UserInput",
        "title": "UserInput > UserInput > UserInput",
        "section": "UserInput > UserInput",
        "text": "class src.pyconverter.xml2py.ast_tree.UserInput(element, parse_children=True)\n\nBases: Element\n\nProvides the user input element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/UserInput",
        "href": "api/src/pyconverter/xml2py/ast_tree/UserInput.html#import-detail",
        "title": "UserInput > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Getting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "Two installation modes of the pyconverter-xml2py package are provided: user and developer.\nInstallation\npyconverter-xml2py"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#user-installation",
        "title": "Getting started > User installation",
        "section": "User installation",
        "text": "Install the latest release for use with this command:\nUser installation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#for-developers",
        "title": "Getting started > For developers",
        "section": "For developers",
        "text": "Installing the pyconverter-xml2py package in developer mode allows you to modify the source and enhance it.\nFor contribution guidelines, see Contribute.\nFor developers\npyconverter-xml2py"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#post-issues",
        "title": "Getting started > Post issues",
        "section": "Post issues",
        "text": "Use the PyConverter-XML2Py Issues page to submit questions,\nreport bug, and request new features. When possible, use these issue templates:\nBug, problem, error:\nFor filing a bug report\nDocumentation issue:\nFor requesting modifications to the documentation\nAdding an example:\nFor proposing a new example\nNew feature:\nFor requesting enhancements to the code\nIf your issue does not fit into one of these categories, create your own issue.\nTo reach the PyAnsys support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ImageData",
        "href": "api/src/pyconverter/xml2py/ast_tree/ImageData.html#imagedata",
        "title": "ImageData",
        "section": "ImageData",
        "text": "Bases: Element\nProvides the base element.\nImageData\nImageData\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ImageData",
        "href": "api/src/pyconverter/xml2py/ast_tree/ImageData.html#src.pyconverter.xml2py.ast_tree.ImageData",
        "title": "ImageData > ImageData > ImageData",
        "section": "ImageData > ImageData",
        "text": "class src.pyconverter.xml2py.ast_tree.ImageData(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ImageData",
        "href": "api/src/pyconverter/xml2py/ast_tree/ImageData.html#import-detail",
        "title": "ImageData > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#term",
        "title": "Term",
        "section": "Term",
        "text": "Bases: Element\nProvides the term element.\nTerm\nTerm\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#src.pyconverter.xml2py.ast_tree.Term",
        "title": "Term > Term > Term",
        "section": "Term > Term",
        "text": "class src.pyconverter.xml2py.ast_tree.Term(element, parse_children=True)\n\nBases: Element\n\nProvides the term element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#overview",
        "title": "Term > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\n__repr__\nOverview\nto_rst\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#import-detail",
        "title": "Term > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#method-detail",
        "title": "Term > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#Term.to_rst",
        "title": "Term > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Term.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Term",
        "href": "api/src/pyconverter/xml2py/ast_tree/Term.html#Term.__repr__",
        "title": "Term > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Term.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ClassName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ClassName.html#classname",
        "title": "ClassName",
        "section": "ClassName",
        "text": "Bases: Element\nProvides the base element.\nClassName\nClassName\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ClassName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ClassName.html#src.pyconverter.xml2py.ast_tree.ClassName",
        "title": "ClassName > ClassName > ClassName",
        "section": "ClassName > ClassName",
        "text": "class src.pyconverter.xml2py.ast_tree.ClassName(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ClassName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ClassName.html#import-detail",
        "title": "ClassName > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#thead",
        "title": "THead",
        "section": "THead",
        "text": "Bases: Element\nProvides the thead element.\nTHead\nTHead\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#src.pyconverter.xml2py.ast_tree.THead",
        "title": "THead > THead > THead",
        "section": "THead > THead",
        "text": "class src.pyconverter.xml2py.ast_tree.THead(element, parse_children=True)\n\nBases: Element\n\nProvides the thead element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#overview",
        "title": "THead > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a list and the length of the list for converting the element\nrows\nReturn all row elements found in the THead element.\nOverview\nto_rst\nrows"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#import-detail",
        "title": "THead > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#property-detail",
        "title": "THead > Property detail",
        "section": "Property detail",
        "text": "Return all row elements found in the THead element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#THead.rows",
        "title": "THead > Property detail > rows",
        "section": "Property detail > rows",
        "text": "property THead.rows\n\nReturn all row elements found in the THead element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#method-detail",
        "title": "THead > Method detail",
        "section": "Method detail",
        "text": "Return a list and the length of the list for converting the element\nto an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/THead",
        "href": "api/src/pyconverter/xml2py/ast_tree/THead.html#THead.to_rst",
        "title": "THead > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "THead.to_rst(indent='', links=None, base_url=None)\n\nReturn a list and the length of the list for converting the element\nto an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProductName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProductName.html#productname",
        "title": "ProductName",
        "section": "ProductName",
        "text": "Bases: Element\nProvides the base element.\nProductName\nProductName\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProductName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProductName.html#src.pyconverter.xml2py.ast_tree.ProductName",
        "title": "ProductName > ProductName > ProductName",
        "section": "ProductName > ProductName",
        "text": "class src.pyconverter.xml2py.ast_tree.ProductName(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProductName",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProductName.html#import-detail",
        "title": "ProductName > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#listitem",
        "title": "ListItem",
        "section": "ListItem",
        "text": "Bases: Element\nProvides the list item element.\nListItem\nListItem\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#src.pyconverter.xml2py.ast_tree.ListItem",
        "title": "ListItem > ListItem > ListItem",
        "section": "ListItem > ListItem",
        "text": "class src.pyconverter.xml2py.ast_tree.ListItem(element, parse_children=True)\n\nBases: Element\n\nProvides the list item element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#overview",
        "title": "ListItem > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#import-detail",
        "title": "ListItem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#method-detail",
        "title": "ListItem > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ListItem",
        "href": "api/src/pyconverter/xml2py/ast_tree/ListItem.html#ListItem.to_rst",
        "title": "ListItem > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "ListItem.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#programlisting",
        "title": "ProgramListing",
        "section": "ProgramListing",
        "text": "Bases: Element\nProvides the program listing element.\nProgramListing\nProgramListing\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#src.pyconverter.xml2py.ast_tree.ProgramListing",
        "title": "ProgramListing > ProgramListing > ProgramListing",
        "section": "ProgramListing > ProgramListing",
        "text": "class src.pyconverter.xml2py.ast_tree.ProgramListing(element, parse_children=True)\n\nBases: Element\n\nProvides the program listing element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#overview",
        "title": "ProgramListing > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nsource\nReturn the source value.\nOverview\nto_rst\nsource"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#import-detail",
        "title": "ProgramListing > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#property-detail",
        "title": "ProgramListing > Property detail",
        "section": "Property detail",
        "text": "Return the source value.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#ProgramListing.source",
        "title": "ProgramListing > Property detail > source",
        "section": "Property detail > source",
        "text": "property ProgramListing.source\n\nReturn the source value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#method-detail",
        "title": "ProgramListing > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ProgramListing",
        "href": "api/src/pyconverter/xml2py/ast_tree/ProgramListing.html#ProgramListing.to_rst",
        "title": "ProgramListing > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "ProgramListing.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#tbody",
        "title": "TBody",
        "section": "TBody",
        "text": "Bases: Element\nProvides the tbody element.\nTBody\nTBody\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#src.pyconverter.xml2py.ast_tree.TBody",
        "title": "TBody > TBody > TBody",
        "section": "TBody > TBody",
        "text": "class src.pyconverter.xml2py.ast_tree.TBody(element, parse_children=True)\n\nBases: Element\n\nProvides the tbody element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#overview",
        "title": "TBody > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a list to enable converting the element to an RST format.\nrows\nReturn all the row elements found in the TBody element.\nOverview\nto_rst\nrows"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#import-detail",
        "title": "TBody > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#property-detail",
        "title": "TBody > Property detail",
        "section": "Property detail",
        "text": "Return all the row elements found in the TBody element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#TBody.rows",
        "title": "TBody > Property detail > rows",
        "section": "Property detail > rows",
        "text": "property TBody.rows\n\nReturn all the row elements found in the TBody element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#method-detail",
        "title": "TBody > Method detail",
        "section": "Method detail",
        "text": "Return a list to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TBody",
        "href": "api/src/pyconverter/xml2py/ast_tree/TBody.html#TBody.to_rst",
        "title": "TBody > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "TBody.to_rst(l_head, indent='', links=None, base_url=None)\n\nReturn a list to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#blockquote",
        "title": "BlockQuote",
        "section": "BlockQuote",
        "text": "Bases: Element\nProvides the block quote element.\nBlockQuote\nBlockQuote\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#src.pyconverter.xml2py.ast_tree.BlockQuote",
        "title": "BlockQuote > BlockQuote > BlockQuote",
        "section": "BlockQuote > BlockQuote",
        "text": "class src.pyconverter.xml2py.ast_tree.BlockQuote(element, parse_children=True)\n\nBases: Element\n\nProvides the block quote element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#overview",
        "title": "BlockQuote > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#import-detail",
        "title": "BlockQuote > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#method-detail",
        "title": "BlockQuote > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/BlockQuote",
        "href": "api/src/pyconverter/xml2py/ast_tree/BlockQuote.html#BlockQuote.to_rst",
        "title": "BlockQuote > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "BlockQuote.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Envar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Envar.html#envar",
        "title": "Envar",
        "section": "Envar",
        "text": "Bases: Element\nProvides the base element.\nEnvar\nEnvar\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Envar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Envar.html#src.pyconverter.xml2py.ast_tree.Envar",
        "title": "Envar > Envar > Envar",
        "section": "Envar > Envar",
        "text": "class src.pyconverter.xml2py.ast_tree.Envar(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Envar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Envar.html#import-detail",
        "title": "Envar > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Structname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Structname.html#structname",
        "title": "Structname",
        "section": "Structname",
        "text": "Bases: Element\nProvides the structure name element.\nStructname\nStructname\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Structname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Structname.html#src.pyconverter.xml2py.ast_tree.Structname",
        "title": "Structname > Structname > Structname",
        "section": "Structname > Structname",
        "text": "class src.pyconverter.xml2py.ast_tree.Structname(element, parse_children=True)\n\nBases: Element\n\nProvides the structure name element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Structname",
        "href": "api/src/pyconverter/xml2py/ast_tree/Structname.html#import-detail",
        "title": "Structname > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#xml-objects",
        "title": "XML objects",
        "section": "XML objects",
        "text": "This section describes common objects handled by the converter. It is not\nan exhaustive list. For more information, see the API reference section.\nXML objects"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#images",
        "title": "XML objects > Images",
        "section": "Images",
        "text": "Images are copied from the given image path to package/doc/source/images/.\nThe images are then included in the ReStructured Text (RST) files with this\ncommand:\nImages present in the Parameters section do not render correctly.\nThis is due to an incompatibility with Python docstrings.\nImages\npackage/doc/source/images/\nParameters"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#tables",
        "title": "XML objects > Tables",
        "section": "Tables",
        "text": "Tables are rendered correctly in the documentation. They do not need to have\na specific format because the converter uses flat-tables.\nTables"
    },
    {
        "objectID": "user_guide/objects",
        "href": "user_guide/objects.html#links",
        "title": "XML objects > Links",
        "section": "Links",
        "text": "Internal and external links are both rendered correctly.\nLinks"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#replaceable",
        "title": "Replaceable",
        "section": "Replaceable",
        "text": "Bases: Element\nProvides the replaceable element.\nReplaceable\nReplaceable\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#src.pyconverter.xml2py.ast_tree.Replaceable",
        "title": "Replaceable > Replaceable > Replaceable",
        "section": "Replaceable > Replaceable",
        "text": "class src.pyconverter.xml2py.ast_tree.Replaceable(element, parse_children=True)\n\nBases: Element\n\nProvides the replaceable element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#overview",
        "title": "Replaceable > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nis_equals\nReplaceable equals something.\ncontent_equals\nContent of the element after handling the ‘=’ sign.\nOverview\nto_rst\nis_equals\ncontent_equals"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#import-detail",
        "title": "Replaceable > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#property-detail",
        "title": "Replaceable > Property detail",
        "section": "Property detail",
        "text": "Replaceable equals something.\nContent of the element after handling the ‘=’ sign.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#Replaceable.is_equals",
        "title": "Replaceable > Property detail > is_equals",
        "section": "Property detail > is_equals",
        "text": "property Replaceable.is_equals\n\nReplaceable equals something.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#Replaceable.content_equals",
        "title": "Replaceable > Property detail > content_equals",
        "section": "Property detail > content_equals",
        "text": "property Replaceable.content_equals\n\nContent of the element after handling the ‘=’ sign.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#method-detail",
        "title": "Replaceable > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Replaceable",
        "href": "api/src/pyconverter/xml2py/ast_tree/Replaceable.html#Replaceable.to_rst",
        "title": "Replaceable > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Replaceable.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#literal",
        "title": "Literal",
        "section": "Literal",
        "text": "Bases: Element\nProvides the literal output element.\nLiteral\nLiteral\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#src.pyconverter.xml2py.ast_tree.Literal",
        "title": "Literal > Literal > Literal",
        "section": "Literal > Literal",
        "text": "class src.pyconverter.xml2py.ast_tree.Literal(element, parse_children=True)\n\nBases: Element\n\nProvides the literal output element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#overview",
        "title": "Literal > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#import-detail",
        "title": "Literal > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#method-detail",
        "title": "Literal > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Literal",
        "href": "api/src/pyconverter/xml2py/ast_tree/Literal.html#Literal.to_rst",
        "title": "Literal > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Literal.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Example",
        "href": "api/src/pyconverter/xml2py/ast_tree/Example.html#example",
        "title": "Example",
        "section": "Example",
        "text": "Bases: Element\nProvides the example element.\nExample\nExample\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Example",
        "href": "api/src/pyconverter/xml2py/ast_tree/Example.html#src.pyconverter.xml2py.ast_tree.Example",
        "title": "Example > Example > Example",
        "section": "Example > Example",
        "text": "class src.pyconverter.xml2py.ast_tree.Example(element, parse_children=True)\n\nBases: Element\n\nProvides the example element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Example",
        "href": "api/src/pyconverter/xml2py/ast_tree/Example.html#import-detail",
        "title": "Example > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#tgroup",
        "title": "TGroup",
        "section": "TGroup",
        "text": "Bases: Element\nProvides the tgroup element, which contains the header and body rows of a table.\nTGroup\nTGroup\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#src.pyconverter.xml2py.ast_tree.TGroup",
        "title": "TGroup > TGroup > TGroup",
        "section": "TGroup > TGroup",
        "text": "class src.pyconverter.xml2py.ast_tree.TGroup(element, parse_children=True)\n\nBases: Element\n\nProvides the tgroup element, which contains the header and body rows of a table.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#overview",
        "title": "TGroup > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nn_col\nNumber of columns.\nthead\nTHead.\ntbody\nTBody.\nrow_in_tbody\nList of the rows in the TBody.\nOverview\nto_rst\nn_col\nthead\ntbody\nrow_in_tbody"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#import-detail",
        "title": "TGroup > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#property-detail",
        "title": "TGroup > Property detail",
        "section": "Property detail",
        "text": "Number of columns.\nTHead.\nTBody.\nList of the rows in the TBody.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#TGroup.n_col",
        "title": "TGroup > Property detail > n_col",
        "section": "Property detail > n_col",
        "text": "property TGroup.n_col\n\nNumber of columns.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#TGroup.thead",
        "title": "TGroup > Property detail > thead",
        "section": "Property detail > thead",
        "text": "property TGroup.thead\n\nTHead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#TGroup.tbody",
        "title": "TGroup > Property detail > tbody",
        "section": "Property detail > tbody",
        "text": "property TGroup.tbody\n\nTBody.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#TGroup.row_in_tbody",
        "title": "TGroup > Property detail > row_in_tbody",
        "section": "Property detail > row_in_tbody",
        "text": "property TGroup.row_in_tbody\n\nList of the rows in the TBody.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#method-detail",
        "title": "TGroup > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/TGroup",
        "href": "api/src/pyconverter/xml2py/ast_tree/TGroup.html#TGroup.to_rst",
        "title": "TGroup > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "TGroup.to_rst(indent='', links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#graphic",
        "title": "Graphic",
        "section": "Graphic",
        "text": "Bases: Element\nProvides the graphic element.\nGraphic\nGraphic\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#src.pyconverter.xml2py.ast_tree.Graphic",
        "title": "Graphic > Graphic > Graphic",
        "section": "Graphic > Graphic",
        "text": "class src.pyconverter.xml2py.ast_tree.Graphic(element, parse_children=True)\n\nBases: Element\n\nProvides the graphic element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#overview",
        "title": "Graphic > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nentityref\nValue of the entityref parameter contained in the graphic element.\nOverview\nto_rst\nentityref\nentityref"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#import-detail",
        "title": "Graphic > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#property-detail",
        "title": "Graphic > Property detail",
        "section": "Property detail",
        "text": "Value of the entityref parameter contained in the graphic element.\nProperty detail\nentityref"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#Graphic.entityref",
        "title": "Graphic > Property detail > entityref",
        "section": "Property detail > entityref",
        "text": "property Graphic.entityref\n\nValue of the entityref parameter contained in the graphic element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#method-detail",
        "title": "Graphic > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Graphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/Graphic.html#Graphic.to_rst",
        "title": "Graphic > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Graphic.to_rst(fcache, indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Sidebar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Sidebar.html#sidebar",
        "title": "Sidebar",
        "section": "Sidebar",
        "text": "Bases: Element\nProvides the base element.\nSidebar\nSidebar\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Sidebar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Sidebar.html#src.pyconverter.xml2py.ast_tree.Sidebar",
        "title": "Sidebar > Sidebar > Sidebar",
        "section": "Sidebar > Sidebar",
        "text": "class src.pyconverter.xml2py.ast_tree.Sidebar(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Sidebar",
        "href": "api/src/pyconverter/xml2py/ast_tree/Sidebar.html#import-detail",
        "title": "Sidebar > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLType",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLType.html#xmltype",
        "title": "XMLType",
        "section": "XMLType",
        "text": "Bases: Element\nProvides the base element.\nXMLType\nXMLType\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLType",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLType.html#src.pyconverter.xml2py.ast_tree.XMLType",
        "title": "XMLType > XMLType > XMLType",
        "section": "XMLType > XMLType",
        "text": "class src.pyconverter.xml2py.ast_tree.XMLType(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLType",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLType.html#import-detail",
        "title": "XMLType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#the-utilspy-module",
        "title": "The utils.py module",
        "section": "The utils.py module",
        "text": "The utils.py module\nutils.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#summary",
        "title": "The utils.py module > Summary",
        "section": "Summary",
        "text": "parse_yaml\nParse a YAML file.\nget_config_data_value\nReturn the value of a specific key in the YAML file.\ncreate_name_map\nCreate a mapping between the initial command name and the Python function name.\nimport_handler\nHandle the imports in the Python file.\nsplit_trail_alpha\nSplit a string based on the last tailing non-alphanumeric character.\nis_numeric\nReturn True when a string is numeric.\nget_refentry\nGet the reference entry from an XML file.\nSummary\nparse_yaml\nget_config_data_value\ncreate_name_map\nimport_handler\nsplit_trail_alpha\nis_numeric\nTrue\nget_refentry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#module-detail",
        "title": "The utils.py module > Module detail",
        "section": "Module detail",
        "text": "Parse a YAML file.\nPath object of the YAML file.\nDictionary with the content of the YAML file.\nReturn the value of a specific key in the YAML file.\nPath object of the YAML file.\nKey to search for in the YAML file.\nCreate a mapping between the initial command name and the Python function name.\nList of command names.\nPath object of the YAML file.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nHandle the imports in the Python file.\nPath object of the Python file.\nAdditional content to add to the Python file.\nString before the function definition.\nSplit a string based on the last tailing non-alphanumeric character.\nString to split.\nReturn True when a string is numeric.\nString to check.\nTrue if the string is numeric.\nGet the reference entry from an XML file.\nPath object of an XML file.\nModule detail\npython:dict\npython:dict\n{\"initial_command_name\": \"python_name\"}\nTrue\nTrue"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.parse_yaml",
        "title": "The utils.py module > Module detail > parse_yaml",
        "section": "Module detail > parse_yaml",
        "text": "utils.parse_yaml(yaml_path: pathlib.Path) -> dict\n\nParse a YAML file.\n\nParameters\n\nyaml_path: Path\n\nPath object of the YAML file.\n\nReturns\n\npython:dict\n\nDictionary with the content of the YAML file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.get_config_data_value",
        "title": "The utils.py module > Module detail > get_config_data_value",
        "section": "Module detail > get_config_data_value",
        "text": "utils.get_config_data_value(yaml_path: pathlib.Path, value: str) -> str | dict | list | None\n\nReturn the value of a specific key in the YAML file.\n\nParameters\n\nyaml_path: Path\n\nPath object of the YAML file.\n\nvalue: str\n\nKey to search for in the YAML file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.create_name_map",
        "title": "The utils.py module > Module detail > create_name_map",
        "section": "Module detail > create_name_map",
        "text": "utils.create_name_map(meta_command: list[str], yaml_file_path: pathlib.Path) -> dict\n\nCreate a mapping between the initial command name and the Python function name.\n\nParameters\n\nmeta_command: list[str]\n\nList of command names.\n\nyaml_file_path: Path\n\nPath object of the YAML file.\n\nReturns\n\npython:dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.import_handler",
        "title": "The utils.py module > Module detail > import_handler",
        "section": "Module detail > import_handler",
        "text": "utils.import_handler(filename: pathlib.Path, additional_content: str, str_before_def: str) -> None\n\nHandle the imports in the Python file.\n\nParameters\n\nfilename: Path\n\nPath object of the Python file.\n\nadditional_content: str\n\nAdditional content to add to the Python file.\n\nstr_before_def: str\n\nString before the function definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.split_trail_alpha",
        "title": "The utils.py module > Module detail > split_trail_alpha",
        "section": "Module detail > split_trail_alpha",
        "text": "utils.split_trail_alpha(text: str) -> Tuple[str, str]\n\nSplit a string based on the last tailing non-alphanumeric character.\n\nParameters\n\ntext: str\n\nString to split.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.is_numeric",
        "title": "The utils.py module > Module detail > is_numeric",
        "section": "Module detail > is_numeric",
        "text": "utils.is_numeric(text: str) -> bool\n\nReturn True when a string is numeric.\n\nParameters\n\ntext: str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if the string is numeric.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/utils/index",
        "href": "api/src/pyconverter/xml2py/utils/utils/index.html#utils.get_refentry",
        "title": "The utils.py module > Module detail > get_refentry",
        "section": "Module detail > get_refentry",
        "text": "utils.get_refentry(filename: pathlib.Path) -> list\n\nGet the reference entry from an XML file.\n\nParameters\n\nfilename: Path\n\nPath object of an XML file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#inlineequation",
        "title": "InlineEquation",
        "section": "InlineEquation",
        "text": "Bases: _Math\nProvides the inline equation element.\nInlineEquation\nInlineEquation\n_Math"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#src.pyconverter.xml2py.ast_tree.InlineEquation",
        "title": "InlineEquation > InlineEquation > InlineEquation",
        "section": "InlineEquation > InlineEquation",
        "text": "class src.pyconverter.xml2py.ast_tree.InlineEquation(element)\n\nBases: _Math\n\nProvides the inline equation element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#overview",
        "title": "InlineEquation > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntail\nReturn the tail of the element as a string.\nOverview\nto_rst\ntail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#import-detail",
        "title": "InlineEquation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#property-detail",
        "title": "InlineEquation > Property detail",
        "section": "Property detail",
        "text": "Return the tail of the element as a string.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#InlineEquation.tail",
        "title": "InlineEquation > Property detail > tail",
        "section": "Property detail > tail",
        "text": "property InlineEquation.tail\n\nReturn the tail of the element as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#method-detail",
        "title": "InlineEquation > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineEquation",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineEquation.html#InlineEquation.to_rst",
        "title": "InlineEquation > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "InlineEquation.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#the-downloadpy-module",
        "title": "The download.py module",
        "section": "The download.py module",
        "text": "The download.py module\ndownload.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#summary",
        "title": "The download.py module > Summary",
        "section": "Summary",
        "text": "download\nThis function initially comes from the following GitHub repository:\ndownload_folder\nThis function initially comes from the following GitHub repository:\ndownload_template\nDownload the templage package provided by default.\nSummary\ndownload\ndownload_folder\ndownload_template"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#description",
        "title": "The download.py module > Description",
        "section": "Description",
        "text": "Functions to download template datasets from the pyconverter-xml2py repository.\nDescription"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#module-detail",
        "title": "The download.py module > Module detail",
        "section": "Module detail",
        "text": "This function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\nDownload the templage package provided by default.\nModule detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#download.download",
        "title": "The download.py module > Module detail > download",
        "section": "Module detail > download",
        "text": "download.download(c: github.ContentFile, out: pathlib.Path) -> None\n\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#download.download_folder",
        "title": "The download.py module > Module detail > download_folder",
        "section": "Module detail > download_folder",
        "text": "download.download_folder(repo: github.Repository, folder: str, out: str, recursive: bool) -> None\n\nThis function initially comes from the following GitHub repository:\nhttps://github.com/Nordgaren/Github-Folder-Downloader\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/download/index",
        "href": "api/src/pyconverter/xml2py/download/index.html#download.download_template",
        "title": "The download.py module > Module detail > download_template",
        "section": "Module detail > download_template",
        "text": "download.download_template() -> None\n\nDownload the templage package provided by default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenu",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#guimenu",
        "title": "GuiMenu",
        "section": "GuiMenu",
        "text": "Bases: Element\nProvides the GUI menu element.\nGuiMenu\nGuiMenu\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenu",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#src.pyconverter.xml2py.ast_tree.GuiMenu",
        "title": "GuiMenu > GuiMenu > GuiMenu",
        "section": "GuiMenu > GuiMenu",
        "text": "class src.pyconverter.xml2py.ast_tree.GuiMenu(element, parse_children=True)\n\nBases: Element\n\nProvides the GUI menu element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/GuiMenu",
        "href": "api/src/pyconverter/xml2py/ast_tree/GuiMenu.html#import-detail",
        "title": "GuiMenu > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#the-writerpy-module",
        "title": "The writer.py module",
        "section": "The writer.py module",
        "text": "The writer.py module\nwriter.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#summary",
        "title": "The writer.py module > Summary",
        "section": "Summary",
        "text": "convert\nConvert an XML directory into an RST dictionary.\ncopy_template_package\nAdd files and directory from a template directory path to a new path.\nwrite_global__init__file\nWrite the __init__.py file for the package generated.\nwrite__init__file\n“\nget_library_path\nGet the desired library path with the following format:\nget_module_info\nGet the module name, class name, and module path from command\nget_class_info\nGet the class name, file name, and file path from the initial class name.\nwrite_source\nWrite out XML commands as Python source files.\nwrite_docs\nOutput to the autogenerated package directory.\nCONST\nSummary\nconvert\ncopy_template_package\nwrite_global__init__file\n__init__.py\nwrite__init__file\nget_library_path\nget_module_info\nget_class_info\nwrite_source\nwrite_docs\npackage\nCONST"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#module-detail",
        "title": "The writer.py module > Module detail",
        "section": "Module detail",
        "text": "Convert an XML directory into an RST dictionary.\nPath to the directory containing the XML files to convert.\nDictionary with the following format: {\"command_name\": command_object}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nAdd files and directory from a template directory path to a new path.\nPath object containing the directory to copy.\nPath object containing the directory where the new files and directorys are to be added.\nWhether the directories in the path for the new package must be cleared before adding\nnew files. The default value is False.\nPath object containing the source files of the created\nxml-commands package.\nWrite the __init__.py file for the package generated.\nPath object of the directory containing the generated package.\n”\nWrite the __init__.py file within each module directory.\nPath object of the directory containing the generated package.\nGet the desired library path with the following format:\nnew_package_path/library_structure.\nFor instance, if library_name_structured in the config.yaml file is\n[\"pyconverter\", \"generatedcommands\"], the function returns\nnew_package_path/pyconverter/generatedcommands.\nPath objecy of the new package directory.\nPath to the configuration file.\nPath object of the new library structure.\nGet the module name, class name, and module path from command\ninformation.\nPath object to the library directory.\nCommand object.\nModule where the command is stored.\nClass where the command is stored.\nPath object of the module directory\nGet the class name, file name, and file path from the initial class name.\nInitial class name.\nPath object of the module directory.\nClass name.\nFile name.\nFile path.\nWrite out XML commands as Python source files.\nDictionary with the following format: {\"initial_command_name\": command_obj}.\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\nPath object containing the XML directory to convert.\nPath object to generate the new package to.\nPath object containing the customized functions. The default value is None.\nPath object of the template to use. If no path is provided, the default template is used.\nPath object of the configuration file. The default value is Path(config.yaml).`.\nWhether the directories in the new package path must be cleared before adding\nnew files. The default value is True.\nWhether the package should be structured. The default value is True.\nWhether the structure map must be checked. The default value is False.\nWhether the files must be checked. The default value is False.\nList of module names created.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nOutput to the autogenerated package directory.\nPath object of the new package folder.\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\nPath object of the configuration file. The default value is Path(config.yaml).\nPath to the new document page.\nModule detail\npython:dict\n{\"command_name\": command_object}\npython:dict\n{\"initial_command_name\": \"python_name\"}\nFalse\nPath\nxml-commands\n__init__.py\n__init__.py\nnew_package_path/library_structure\nlibrary_name_structured\nconfig.yaml\n[\"pyconverter\", \"generatedcommands\"]\nnew_package_path/pyconverter/generatedcommands\nPath\npython:str\npython:str\nPath\npython:str\npython:str\nPath\n{\"initial_command_name\": command_obj}\n{\"initial_command_name\": \"python_name\"}\nNone\nPath(config.yaml)\nTrue\nTrue\nFalse\nFalse\npython:list\npython:dict\n{'python_module_name': [{'python_class_name': python_names_list}]}\npackage\n{'python_module_name': [{'python_class_name': python_names_list}]}\nPath(config.yaml)\nPath"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.convert",
        "title": "The writer.py module > Module detail > convert",
        "section": "Module detail > convert",
        "text": "writer.convert(directory_path)\n\nConvert an XML directory into an RST dictionary.\n\nParameters\n\ndirectory_path: Path\n\nPath to the directory containing the XML files to convert.\n\nReturns\n\npython:dict\n\nDictionary with the following format: {\"command_name\": command_object}.\n\npython:dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.copy_template_package",
        "title": "The writer.py module > Module detail > copy_template_package",
        "section": "Module detail > copy_template_package",
        "text": "writer.copy_template_package(template_path: pathlib.Path, new_package_path: pathlib.Path, clean: bool = False) -> pathlib.Path\n\nAdd files and directory from a template directory path to a new path.\n\nParameters\n\ntemplate_path: Path\n\nPath object containing the directory to copy.\n\nnew_package_path: Path\n\nPath object containing the directory where the new files and directorys are to be added.\n\nclean: bool, optional\n\nWhether the directories in the path for the new package must be cleared before adding\nnew files. The default value is False.\n\nReturns\n\nPath\n\nPath object containing the source files of the created\nxml-commands package.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.write_global__init__file",
        "title": "The writer.py module > Module detail > write_global__init__file",
        "section": "Module detail > write_global__init__file",
        "text": "writer.write_global__init__file(library_path: pathlib.Path, config_path: pathlib.Path) -> None\n\nWrite the __init__.py file for the package generated.\n\nParameters\n\nlibrary_path: Path\n\nPath object of the directory containing the generated package.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.write__init__file",
        "title": "The writer.py module > Module detail > write__init__file",
        "section": "Module detail > write__init__file",
        "text": "writer.write__init__file(library_path: pathlib.Path) -> None\n\n”\nWrite the __init__.py file within each module directory.\n\nParameters\n\nlibrary_path: Path\n\nPath object of the directory containing the generated package.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.get_library_path",
        "title": "The writer.py module > Module detail > get_library_path",
        "section": "Module detail > get_library_path",
        "text": "writer.get_library_path(new_package_path: pathlib.Path, config_path: pathlib.Path, subfolder: bool = True) -> pathlib.Path\n\nGet the desired library path with the following format:\nnew_package_path/library_structure.\n\nFor instance, if library_name_structured in the config.yaml file is\n[\"pyconverter\", \"generatedcommands\"], the function returns\nnew_package_path/pyconverter/generatedcommands.\n\nParameters\n\nnew_package_path: Path\n\nPath objecy of the new package directory.\n\nconfig_path: str\n\nPath to the configuration file.\n\nReturns\n\nPath\n\nPath object of the new library structure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.get_module_info",
        "title": "The writer.py module > Module detail > get_module_info",
        "section": "Module detail > get_module_info",
        "text": "writer.get_module_info(library_path: pathlib.Path, command: pyconverter.xml2py.ast_tree.XMLCommand) -> Tuple[str, str, pathlib.Path]\n\nGet the module name, class name, and module path from command\ninformation.\n\nParameters\n\nlibrary_path: Path\n\nPath object to the library directory.\n\ncommand: ast.XMLCommand\n\nCommand object.\n\nReturns\n\npython:str\n\nModule where the command is stored.\n\npython:str\n\nClass where the command is stored.\n\nPath\n\nPath object of the module directory\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.get_class_info",
        "title": "The writer.py module > Module detail > get_class_info",
        "section": "Module detail > get_class_info",
        "text": "writer.get_class_info(initial_class_name: str, module_path: pathlib.Path) -> Tuple[str, str, pathlib.Path]\n\nGet the class name, file name, and file path from the initial class name.\n\nParameters\n\ninitial_class_name: str\n\nInitial class name.\n\nmodule_path: Path\n\nPath object of the module directory.\n\nReturns\n\npython:str\n\nClass name.\n\npython:str\n\nFile name.\n\nPath\n\nFile path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.write_source",
        "title": "The writer.py module > Module detail > write_source",
        "section": "Module detail > write_source",
        "text": "writer.write_source(command_map: dict, name_map: dict, xml_doc_path: pathlib.Path, target_path: pathlib.Path, path_custom_functions: pathlib.Path | None = None, template_path: pathlib.Path | None = None, config_path: pathlib.Path = Path('config.yaml'), clean: bool = True, structured: bool = True, check_structure_map: bool = False, check_files: bool = True) -> Tuple[list, dict]\n\nWrite out XML commands as Python source files.\n\nParameters\n\ncommand_map: dict\n\nDictionary with the following format: {\"initial_command_name\": command_obj}.\n\nname_map: dict\n\nDictionary with the following format: {\"initial_command_name\": \"python_name\"}.\n\nxml_doc_path: Path\n\nPath object containing the XML directory to convert.\n\ntarget_path: Path\n\nPath object to generate the new package to.\n\npath_custom_functions: Path, optional\n\nPath object containing the customized functions. The default value is None.\n\ntemplate_path: Path, optional\n\nPath object of the template to use. If no path is provided, the default template is used.\n\nconfig_path: Path, optional\n\nPath object of the configuration file. The default value is Path(config.yaml).`.\n\nclean: bool, optional\n\nWhether the directories in the new package path must be cleared before adding\nnew files. The default value is True.\n\nstructured: bool, optional\n\nWhether the package should be structured. The default value is True.\n\ncheck_structure_map: bool, optional\n\nWhether the structure map must be checked. The default value is False.\n\ncheck_files: bool, optional\n\nWhether the files must be checked. The default value is False.\n\nReturns\n\npython:list\n\nList of module names created.\n\npython:dict\n\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.write_docs",
        "title": "The writer.py module > Module detail > write_docs",
        "section": "Module detail > write_docs",
        "text": "writer.write_docs(package_path: pathlib.Path, package_structure: dict = None, config_path: pathlib.Path = Path('config.yaml')) -> pathlib.Path\n\nOutput to the autogenerated package directory.\n\nParameters\n\npackage_path: Path\n\nPath object of the new package folder.\n\npackage_structure: dict, optional\n\nDictionary with the following format:\n{'python_module_name': [{'python_class_name': python_names_list}]}.\n\nconfig_path: Path, optional\n\nPath object of the configuration file. The default value is Path(config.yaml).\n\nReturns\n\nPath\n\nPath to the new document page.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/writer/index",
        "href": "api/src/pyconverter/xml2py/writer/index.html#writer.CONST",
        "title": "The writer.py module > Module detail > CONST",
        "section": "Module detail > CONST",
        "text": "writer.CONST\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#informaltable",
        "title": "InformalTable",
        "section": "InformalTable",
        "text": "Bases: Element\nProvides the informal table element.\nInformalTable\nInformalTable\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#src.pyconverter.xml2py.ast_tree.InformalTable",
        "title": "InformalTable > InformalTable > InformalTable",
        "section": "InformalTable > InformalTable",
        "text": "class src.pyconverter.xml2py.ast_tree.InformalTable(element, parse_children=True)\n\nBases: Element\n\nProvides the informal table element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#overview",
        "title": "InformalTable > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#import-detail",
        "title": "InformalTable > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#method-detail",
        "title": "InformalTable > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalTable",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalTable.html#InformalTable.to_rst",
        "title": "InformalTable > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "InformalTable.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Imageobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Imageobject.html#imageobject",
        "title": "Imageobject",
        "section": "Imageobject",
        "text": "Bases: Element\nProvides the base element.\nImageobject\nImageobject\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Imageobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Imageobject.html#src.pyconverter.xml2py.ast_tree.Imageobject",
        "title": "Imageobject > Imageobject > Imageobject",
        "section": "Imageobject > Imageobject",
        "text": "class src.pyconverter.xml2py.ast_tree.Imageobject(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Imageobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Imageobject.html#import-detail",
        "title": "Imageobject > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#inlinegraphic",
        "title": "InlineGraphic",
        "section": "InlineGraphic",
        "text": "Bases: Element\nProvides the inline graphic element.\nInlineGraphic\nInlineGraphic\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#src.pyconverter.xml2py.ast_tree.InlineGraphic",
        "title": "InlineGraphic > InlineGraphic > InlineGraphic",
        "section": "InlineGraphic > InlineGraphic",
        "text": "class src.pyconverter.xml2py.ast_tree.InlineGraphic(element, parse_children=True)\n\nBases: Element\n\nProvides the inline graphic element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#overview",
        "title": "InlineGraphic > Overview",
        "section": "Overview",
        "text": "fileref\nFile reference.\nOverview\nfileref"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#import-detail",
        "title": "InlineGraphic > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#method-detail",
        "title": "InlineGraphic > Method detail",
        "section": "Method detail",
        "text": "File reference.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic",
        "href": "api/src/pyconverter/xml2py/ast_tree/InlineGraphic.html#InlineGraphic.fileref",
        "title": "InlineGraphic > Method detail > fileref",
        "section": "Method detail > fileref",
        "text": "InlineGraphic.fileref()\n\nFile reference.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#the-regex_patternpy-module",
        "title": "The regex_pattern.py module",
        "section": "The regex_pattern.py module",
        "text": "The regex_pattern.py module\nregex_pattern.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#summary",
        "title": "The regex_pattern.py module > Summary",
        "section": "Summary",
        "text": "BEFORE_DEF\nGET_GROUP\nGET_CLASSNAME\nGET_TYPENAME_1OPT\nGET_TYPENAME_2OPT\nGET_IMPORTS\nSummary\nBEFORE_DEF\nGET_GROUP\nGET_CLASSNAME\nGET_TYPENAME_1OPT\nGET_TYPENAME_2OPT\nGET_IMPORTS"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#module-detail",
        "title": "The regex_pattern.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.BEFORE_DEF",
        "title": "The regex_pattern.py module > Module detail > BEFORE_DEF",
        "section": "Module detail > BEFORE_DEF",
        "text": "regex_pattern.BEFORE_DEF = '[\\\\s\\\\S]*?(?=def '\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.GET_GROUP",
        "title": "The regex_pattern.py module > Module detail > GET_GROUP",
        "section": "Module detail > GET_GROUP",
        "text": "regex_pattern.GET_GROUP = '(?<=&)(.*?)(?=;)'\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.GET_CLASSNAME",
        "title": "The regex_pattern.py module > Module detail > GET_CLASSNAME",
        "section": "Module detail > GET_CLASSNAME",
        "text": "regex_pattern.GET_CLASSNAME = '(\\\\S+)(?=:)'\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.GET_TYPENAME_1OPT",
        "title": "The regex_pattern.py module > Module detail > GET_TYPENAME_1OPT",
        "section": "Module detail > GET_TYPENAME_1OPT",
        "text": "regex_pattern.GET_TYPENAME_1OPT = '(?<=:)(.*)'\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.GET_TYPENAME_2OPT",
        "title": "The regex_pattern.py module > Module detail > GET_TYPENAME_2OPT",
        "section": "Module detail > GET_TYPENAME_2OPT",
        "text": "regex_pattern.GET_TYPENAME_2OPT = '(?<=:)(.*?)(?=[A-Z][A-Z])'\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/utils/regex_pattern/index",
        "href": "api/src/pyconverter/xml2py/utils/regex_pattern/index.html#regex_pattern.GET_IMPORTS",
        "title": "The regex_pattern.py module > Module detail > GET_IMPORTS",
        "section": "Module detail > GET_IMPORTS",
        "text": "regex_pattern.GET_IMPORTS = '(?:(?:from [a-zA-Z0-9_.]* import [a-zA-Z0-9_.]* as [a-zA-Z0-9_.]*)|(?:from [a-zA-Z0-9_.]*...\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#link",
        "title": "Link",
        "section": "Link",
        "text": "Bases: Element\nProvides the link element.\nLink\nLink\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#src.pyconverter.xml2py.ast_tree.Link",
        "title": "Link > Link > Link",
        "section": "Link > Link",
        "text": "class src.pyconverter.xml2py.ast_tree.Link(element)\n\nBases: Element\n\nProvides the link element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#overview",
        "title": "Link > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nlinkend\nLink.\n__repr__\nOverview\nto_rst\nlinkend\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#import-detail",
        "title": "Link > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#property-detail",
        "title": "Link > Property detail",
        "section": "Property detail",
        "text": "Link.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#Link.linkend",
        "title": "Link > Property detail > linkend",
        "section": "Property detail > linkend",
        "text": "property Link.linkend\n\nLink.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#method-detail",
        "title": "Link > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#Link.__repr__",
        "title": "Link > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Link.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Link",
        "href": "api/src/pyconverter/xml2py/ast_tree/Link.html#Link.to_rst",
        "title": "Link > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Link.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/index",
        "href": "api/src/pyconverter/xml2py/version_variables/index.html#the-version_variablespy-module",
        "title": "The version_variables.py module",
        "section": "The version_variables.py module",
        "text": "The version_variables.py module\nversion_variables.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/version_variables/index",
        "href": "api/src/pyconverter/xml2py/version_variables/index.html#summary",
        "title": "The version_variables.py module > Summary",
        "section": "Summary",
        "text": "Autogenerateddirectory\nContains the version variables of the XML documentation.\nSummary\nAutogenerateddirectory"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Mediaobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#mediaobject",
        "title": "Mediaobject",
        "section": "Mediaobject",
        "text": "Bases: Element\nProvides the base element.\nMediaobject\nMediaobject\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Mediaobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#src.pyconverter.xml2py.ast_tree.Mediaobject",
        "title": "Mediaobject > Mediaobject > Mediaobject",
        "section": "Mediaobject > Mediaobject",
        "text": "class src.pyconverter.xml2py.ast_tree.Mediaobject(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Mediaobject",
        "href": "api/src/pyconverter/xml2py/ast_tree/Mediaobject.html#import-detail",
        "title": "Mediaobject > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#element",
        "title": "Element",
        "section": "Element",
        "text": "Provides the base element.\nElement\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#src.pyconverter.xml2py.ast_tree.Element",
        "title": "Element > Element > Element",
        "section": "Element > Element",
        "text": "class src.pyconverter.xml2py.ast_tree.Element(element, parse_children=True)\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#overview",
        "title": "Element > Overview",
        "section": "Overview",
        "text": "has_children\nReturn wether the element has children.\nget\nGet an item from an element.\nprint_tree\nPrint the tree.\ntypes_repr\nReturn the string types.\nget_children_by_type\nGet children of a specific type.\nget_titles_in_element_list\nGet the titles of the elements in a list of elements.\nto_rst\nReturn a string to enable converting the element to an RST format.\nrec_find\nFind the first type matching a given type string recursively.\nfind\nFind the first type matching a given type string.\nfind_all\nFind all types matching a given type string.\ntext_content\nText content.\nraw\nRaw string of the element.\ntostring\nAttributes of the element as a dictionary.\nadded\nHas the revision flag added.\nany_isalnum\nReturns True if any characters are alphanumeric.\ntail\nTail of the element as a string.\nchildren\nChildren of the tree.\nchildren_types\nTypes of the children.\ntitle\nElement title.\ncontent\nText content.\nid\nID of the element.\nnext_elem\nNext element.\nprev_elem\nPrevious element.\ntag\nElement tag.\n__getitem__\n__len__\n__repr__\nOverview\nhas_children\nget\nprint_tree\ntypes_repr\nget_children_by_type\nget_titles_in_element_list\nto_rst\nrec_find\nfind\nfind_all\ntext_content\nraw\ntostring\nadded\nadded\nany_isalnum\nTrue\ntail\nchildren\nchildren_types\ntitle\ncontent\nid\nnext_elem\nprev_elem\ntag\n__getitem__\n__len__\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#import-detail",
        "title": "Element > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#property-detail",
        "title": "Element > Property detail",
        "section": "Property detail",
        "text": "Text content.\nRaw string of the element.\nAttributes of the element as a dictionary.\nHas the revision flag added.\nReturns True if any characters are alphanumeric.\nTail of the element as a string.\nChildren of the tree.\nTypes of the children.\nElement title.\nText content.\nID of the element.\nNext element.\nPrevious element.\nElement tag.\nProperty detail\nadded\nTrue"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.text_content",
        "title": "Element > Property detail > text_content",
        "section": "Property detail > text_content",
        "text": "property Element.text_content\n\nText content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.raw",
        "title": "Element > Property detail > raw",
        "section": "Property detail > raw",
        "text": "property Element.raw\n\nRaw string of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.tostring",
        "title": "Element > Property detail > tostring",
        "section": "Property detail > tostring",
        "text": "property Element.tostring\n\nAttributes of the element as a dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.added",
        "title": "Element > Property detail > added",
        "section": "Property detail > added",
        "text": "property Element.added\n\nHas the revision flag added.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.any_isalnum",
        "title": "Element > Property detail > any_isalnum",
        "section": "Property detail > any_isalnum",
        "text": "property Element.any_isalnum\n\nReturns True if any characters are alphanumeric.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.tail",
        "title": "Element > Property detail > tail",
        "section": "Property detail > tail",
        "text": "property Element.tail\n\nTail of the element as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.children",
        "title": "Element > Property detail > children",
        "section": "Property detail > children",
        "text": "property Element.children\n\nChildren of the tree.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.children_types",
        "title": "Element > Property detail > children_types",
        "section": "Property detail > children_types",
        "text": "property Element.children_types\n\nTypes of the children.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.title",
        "title": "Element > Property detail > title",
        "section": "Property detail > title",
        "text": "property Element.title\n\nElement title.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.content",
        "title": "Element > Property detail > content",
        "section": "Property detail > content",
        "text": "property Element.content\n\nText content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.id",
        "title": "Element > Property detail > id",
        "section": "Property detail > id",
        "text": "property Element.id\n\nID of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.next_elem",
        "title": "Element > Property detail > next_elem",
        "section": "Property detail > next_elem",
        "text": "property Element.next_elem\n\nNext element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.prev_elem",
        "title": "Element > Property detail > prev_elem",
        "section": "Property detail > prev_elem",
        "text": "property Element.prev_elem\n\nPrevious element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.tag",
        "title": "Element > Property detail > tag",
        "section": "Property detail > tag",
        "text": "property Element.tag\n\nElement tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#method-detail",
        "title": "Element > Method detail",
        "section": "Method detail",
        "text": "Return wether the element has children.\nGet an item from an element.\nPrint the tree.\nReturn the string types.\nGet children of a specific type.\nGet the titles of the elements in a list of elements.\nReturn a string to enable converting the element to an RST format.\nFind the first type matching a given type string recursively.\nFind the first type matching a given type string.\nFind all types matching a given type string.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.has_children",
        "title": "Element > Method detail > has_children",
        "section": "Method detail > has_children",
        "text": "Element.has_children()\n\nReturn wether the element has children.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.get",
        "title": "Element > Method detail > get",
        "section": "Method detail > get",
        "text": "Element.get(entry)\n\nGet an item from an element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.print_tree",
        "title": "Element > Method detail > print_tree",
        "section": "Method detail > print_tree",
        "text": "Element.print_tree()\n\nPrint the tree.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.types_repr",
        "title": "Element > Method detail > types_repr",
        "section": "Method detail > types_repr",
        "text": "Element.types_repr()\n\nReturn the string types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.__getitem__",
        "title": "Element > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Element.__getitem__(index)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.__len__",
        "title": "Element > Method detail > __len__",
        "section": "Method detail > __len__",
        "text": "Element.__len__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.get_children_by_type",
        "title": "Element > Method detail > get_children_by_type",
        "section": "Method detail > get_children_by_type",
        "text": "Element.get_children_by_type(type_name)\n\nGet children of a specific type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.get_titles_in_element_list",
        "title": "Element > Method detail > get_titles_in_element_list",
        "section": "Method detail > get_titles_in_element_list",
        "text": "Element.get_titles_in_element_list()\n\nGet the titles of the elements in a list of elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.__repr__",
        "title": "Element > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Element.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.to_rst",
        "title": "Element > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Element.to_rst(indent='', max_length=100, links=None, base_url=None, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.rec_find",
        "title": "Element > Method detail > rec_find",
        "section": "Method detail > rec_find",
        "text": "Element.rec_find(_type, terms=None)\n\nFind the first type matching a given type string recursively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.find",
        "title": "Element > Method detail > find",
        "section": "Method detail > find",
        "text": "Element.find(_type, terms=None)\n\nFind the first type matching a given type string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Element",
        "href": "api/src/pyconverter/xml2py/ast_tree/Element.html#Element.find_all",
        "title": "Element > Method detail > find_all",
        "section": "Method detail > find_all",
        "text": "Element.find_all(_type, recursive=False, terms=None)\n\nFind all types matching a given type string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#table",
        "title": "Table",
        "section": "Table",
        "text": "Bases: Element\nProvides the table element\nTable\nTable\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#src.pyconverter.xml2py.ast_tree.Table",
        "title": "Table > Table > Table",
        "section": "Table > Table",
        "text": "class src.pyconverter.xml2py.ast_tree.Table(element, parse_children=True)\n\nBases: Element\n\nProvides the table element\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#overview",
        "title": "Table > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nTable title.\ntgroup\nTGroup.\n__repr__\nOverview\nto_rst\ntitle\ntgroup\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#import-detail",
        "title": "Table > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#property-detail",
        "title": "Table > Property detail",
        "section": "Property detail",
        "text": "Table title.\nTGroup.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#Table.title",
        "title": "Table > Property detail > title",
        "section": "Property detail > title",
        "text": "property Table.title\n\nTable title.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#Table.tgroup",
        "title": "Table > Property detail > tgroup",
        "section": "Property detail > tgroup",
        "text": "property Table.tgroup\n\nTGroup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#method-detail",
        "title": "Table > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#Table.to_rst",
        "title": "Table > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Table.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Table",
        "href": "api/src/pyconverter/xml2py/ast_tree/Table.html#Table.__repr__",
        "title": "Table > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Table.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Application",
        "href": "api/src/pyconverter/xml2py/ast_tree/Application.html#application",
        "title": "Application",
        "section": "Application",
        "text": "Bases: Element\nProvides the base element.\nApplication\nApplication\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Application",
        "href": "api/src/pyconverter/xml2py/ast_tree/Application.html#src.pyconverter.xml2py.ast_tree.Application",
        "title": "Application > Application > Application",
        "section": "Application > Application",
        "text": "class src.pyconverter.xml2py.ast_tree.Application(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Application",
        "href": "api/src/pyconverter/xml2py/ast_tree/Application.html#import-detail",
        "title": "Application > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#the-srcpyconverterxml2py-library",
        "title": "The src.pyconverter.xml2py library",
        "section": "The src.pyconverter.xml2py library",
        "text": "The src.pyconverter.xml2py library\nsrc.pyconverter.xml2py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#summary",
        "title": "The src.pyconverter.xml2py library > Summary",
        "section": "Summary",
        "text": "utils\nast_tree\ncli\nCommand Line Interface for PyConverter-XML2Py.\ncustom_functions\ndirectory_format\ndownload\nFunctions to download template datasets from the pyconverter-xml2py repository.\nformatter\nThis module contains the functions to format the generated docstrings with\nload_xml_doc\nversion_variables\nwriter\n__version__\npyconverter.xml2py version.\nSummary\nutils\nast_tree\ncli\ncustom_functions\ndirectory_format\ndownload\nformatter\nload_xml_doc\nversion_variables\nwriter\n__version__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#description",
        "title": "The src.pyconverter.xml2py library > Description",
        "section": "Description",
        "text": "pyconverter.xml2py\nDescription"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#module-detail",
        "title": "The src.pyconverter.xml2py library > Module detail",
        "section": "Module detail",
        "text": "pyconverter.xml2py version.\nModule detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/index",
        "href": "api/src/pyconverter/xml2py/index.html#xml2py.__version__",
        "title": "The src.pyconverter.xml2py library > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "xml2py.__version__\n\npyconverter.xml2py version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Glossterm",
        "href": "api/src/pyconverter/xml2py/ast_tree/Glossterm.html#glossterm",
        "title": "Glossterm",
        "section": "Glossterm",
        "text": "Bases: Element\nProvides the base element.\nGlossterm\nGlossterm\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Glossterm",
        "href": "api/src/pyconverter/xml2py/ast_tree/Glossterm.html#src.pyconverter.xml2py.ast_tree.Glossterm",
        "title": "Glossterm > Glossterm > Glossterm",
        "section": "Glossterm > Glossterm",
        "text": "class src.pyconverter.xml2py.ast_tree.Glossterm(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Glossterm",
        "href": "api/src/pyconverter/xml2py/ast_tree/Glossterm.html#import-detail",
        "title": "Glossterm > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#filename",
        "title": "FileName",
        "section": "FileName",
        "text": "Bases: Element\nProvides the filename element.\nFileName\nFileName\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#src.pyconverter.xml2py.ast_tree.FileName",
        "title": "FileName > FileName > FileName",
        "section": "FileName > FileName",
        "text": "class src.pyconverter.xml2py.ast_tree.FileName(element, parse_children=True)\n\nBases: Element\n\nProvides the filename element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#overview",
        "title": "FileName > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#import-detail",
        "title": "FileName > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#method-detail",
        "title": "FileName > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/FileName",
        "href": "api/src/pyconverter/xml2py/ast_tree/FileName.html#FileName.to_rst",
        "title": "FileName > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "FileName.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#informalexample",
        "title": "InformalExample",
        "section": "InformalExample",
        "text": "Bases: Element\nProvides the informal example element.\nInformalExample\nInformalExample\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#src.pyconverter.xml2py.ast_tree.InformalExample",
        "title": "InformalExample > InformalExample > InformalExample",
        "section": "InformalExample > InformalExample",
        "text": "class src.pyconverter.xml2py.ast_tree.InformalExample(element, parse_children=True)\n\nBases: Element\n\nProvides the informal example element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#overview",
        "title": "InformalExample > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#import-detail",
        "title": "InformalExample > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#method-detail",
        "title": "InformalExample > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/InformalExample",
        "href": "api/src/pyconverter/xml2py/ast_tree/InformalExample.html#InformalExample.__repr__",
        "title": "InformalExample > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "InformalExample.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/IndexTerm",
        "href": "api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#indexterm",
        "title": "IndexTerm",
        "section": "IndexTerm",
        "text": "Bases: Element\nProvides the index term element.\nIndexTerm\nIndexTerm\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/IndexTerm",
        "href": "api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#src.pyconverter.xml2py.ast_tree.IndexTerm",
        "title": "IndexTerm > IndexTerm > IndexTerm",
        "section": "IndexTerm > IndexTerm",
        "text": "class src.pyconverter.xml2py.ast_tree.IndexTerm(element, parse_children=True)\n\nBases: Element\n\nProvides the index term element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/IndexTerm",
        "href": "api/src/pyconverter/xml2py/ast_tree/IndexTerm.html#import-detail",
        "title": "IndexTerm > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#olink",
        "title": "OLink",
        "section": "OLink",
        "text": "Bases: Element\nProvides the external link element.\nOLink\nOLink\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#src.pyconverter.xml2py.ast_tree.OLink",
        "title": "OLink > OLink > OLink",
        "section": "OLink > OLink",
        "text": "class src.pyconverter.xml2py.ast_tree.OLink(element)\n\nBases: Element\n\nProvides the external link element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#overview",
        "title": "OLink > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntargetptr\nValue for the targetptr contained in the OLink element.\ntargetdoc\nValue for the targetdoc parameter contained in the OLink element.\nOverview\nto_rst\ntargetptr\ntargetptr\ntargetdoc\ntargetdoc"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#import-detail",
        "title": "OLink > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#property-detail",
        "title": "OLink > Property detail",
        "section": "Property detail",
        "text": "Value for the targetptr contained in the OLink element.\nValue for the targetdoc parameter contained in the OLink element.\nProperty detail\ntargetptr\ntargetdoc"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#OLink.targetptr",
        "title": "OLink > Property detail > targetptr",
        "section": "Property detail > targetptr",
        "text": "property OLink.targetptr\n\nValue for the targetptr contained in the OLink element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#OLink.targetdoc",
        "title": "OLink > Property detail > targetdoc",
        "section": "Property detail > targetdoc",
        "text": "property OLink.targetdoc\n\nValue for the targetdoc parameter contained in the OLink element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#method-detail",
        "title": "OLink > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OLink",
        "href": "api/src/pyconverter/xml2py/ast_tree/OLink.html#OLink.to_rst",
        "title": "OLink > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "OLink.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#figure",
        "title": "Figure",
        "section": "Figure",
        "text": "Bases: Element\nProvides the figure element.\nFigure\nFigure\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#src.pyconverter.xml2py.ast_tree.Figure",
        "title": "Figure > Figure > Figure",
        "section": "Figure > Figure",
        "text": "class src.pyconverter.xml2py.ast_tree.Figure(element, parse_children=True)\n\nBases: Element\n\nProvides the figure element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#overview",
        "title": "Figure > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntitle\nFirst title element found in the figure element.\ngraphic\nFirst graphic element found in the figure element.\nOverview\nto_rst\ntitle\ngraphic"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#import-detail",
        "title": "Figure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#property-detail",
        "title": "Figure > Property detail",
        "section": "Property detail",
        "text": "First title element found in the figure element.\nFirst graphic element found in the figure element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#Figure.title",
        "title": "Figure > Property detail > title",
        "section": "Property detail > title",
        "text": "property Figure.title\n\nFirst title element found in the figure element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#Figure.graphic",
        "title": "Figure > Property detail > graphic",
        "section": "Property detail > graphic",
        "text": "property Figure.graphic\n\nFirst graphic element found in the figure element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#method-detail",
        "title": "Figure > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Figure",
        "href": "api/src/pyconverter/xml2py/ast_tree/Figure.html#Figure.to_rst",
        "title": "Figure > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Figure.to_rst(indent='', max_length=100, fcache=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#refnamediv",
        "title": "Refnamediv",
        "section": "Refnamediv",
        "text": "Bases: Element\nProvides the refnamediv element, which contains the name,\npurpose, and classification of a reference.\nRefnamediv\nRefnamediv\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#src.pyconverter.xml2py.ast_tree.Refnamediv",
        "title": "Refnamediv > Refnamediv > Refnamediv",
        "section": "Refnamediv > Refnamediv",
        "text": "class src.pyconverter.xml2py.ast_tree.Refnamediv(element, terms=None)\n\nBases: Element\n\nProvides the refnamediv element, which contains the name,\npurpose, and classification of a reference.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#overview",
        "title": "Refnamediv > Overview",
        "section": "Overview",
        "text": "terms\nTerms of the element.\nrefname\nRefname of the element.\npurpose\nRefpurpose of the element.\nOverview\nterms\nrefname\npurpose"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#import-detail",
        "title": "Refnamediv > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#property-detail",
        "title": "Refnamediv > Property detail",
        "section": "Property detail",
        "text": "Terms of the element.\nRefname of the element.\nRefpurpose of the element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#Refnamediv.terms",
        "title": "Refnamediv > Property detail > terms",
        "section": "Property detail > terms",
        "text": "property Refnamediv.terms\n\nTerms of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#Refnamediv.refname",
        "title": "Refnamediv > Property detail > refname",
        "section": "Property detail > refname",
        "text": "property Refnamediv.refname\n\nRefname of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Refnamediv",
        "href": "api/src/pyconverter/xml2py/ast_tree/Refnamediv.html#Refnamediv.purpose",
        "title": "Refnamediv > Property detail > purpose",
        "section": "Property detail > purpose",
        "text": "property Refnamediv.purpose\n\nRefpurpose of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SubScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SubScript.html#subscript",
        "title": "SubScript",
        "section": "SubScript",
        "text": "Bases: Element\nProvides the subscript element.\nSubScript\nSubScript\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SubScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SubScript.html#src.pyconverter.xml2py.ast_tree.SubScript",
        "title": "SubScript > SubScript > SubScript",
        "section": "SubScript > SubScript",
        "text": "class src.pyconverter.xml2py.ast_tree.SubScript(element)\n\nBases: Element\n\nProvides the subscript element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/SubScript",
        "href": "api/src/pyconverter/xml2py/ast_tree/SubScript.html#import-detail",
        "title": "SubScript > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ColSpec",
        "href": "api/src/pyconverter/xml2py/ast_tree/ColSpec.html#colspec",
        "title": "ColSpec",
        "section": "ColSpec",
        "text": "Bases: Element\nProvides the base element.\nColSpec\nColSpec\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ColSpec",
        "href": "api/src/pyconverter/xml2py/ast_tree/ColSpec.html#src.pyconverter.xml2py.ast_tree.ColSpec",
        "title": "ColSpec > ColSpec > ColSpec",
        "section": "ColSpec > ColSpec",
        "text": "class src.pyconverter.xml2py.ast_tree.ColSpec(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ColSpec",
        "href": "api/src/pyconverter/xml2py/ast_tree/ColSpec.html#import-detail",
        "title": "ColSpec > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnoteref",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#footnoteref",
        "title": "Footnoteref",
        "section": "Footnoteref",
        "text": "Bases: Element\nProvides the base element.\nFootnoteref\nFootnoteref\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnoteref",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#src.pyconverter.xml2py.ast_tree.Footnoteref",
        "title": "Footnoteref > Footnoteref > Footnoteref",
        "section": "Footnoteref > Footnoteref",
        "text": "class src.pyconverter.xml2py.ast_tree.Footnoteref(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnoteref",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnoteref.html#import-detail",
        "title": "Footnoteref > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Remark",
        "href": "api/src/pyconverter/xml2py/ast_tree/Remark.html#remark",
        "title": "Remark",
        "section": "Remark",
        "text": "Bases: Element\nProvides the base element.\nRemark\nRemark\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Remark",
        "href": "api/src/pyconverter/xml2py/ast_tree/Remark.html#src.pyconverter.xml2py.ast_tree.Remark",
        "title": "Remark > Remark > Remark",
        "section": "Remark > Remark",
        "text": "class src.pyconverter.xml2py.ast_tree.Remark(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Remark",
        "href": "api/src/pyconverter/xml2py/ast_tree/Remark.html#import-detail",
        "title": "Remark > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#the-custom_functionspy-module",
        "title": "The custom_functions.py module",
        "section": "The custom_functions.py module",
        "text": "The custom_functions.py module\ncustom_functions.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#summary",
        "title": "The custom_functions.py module > Summary",
        "section": "Summary",
        "text": "CustomFunctions\nProvides for creating customized functions.\nget_docstring_lists\nGet lists of strings depending on Python file sections.\nSummary\nCustomFunctions\nget_docstring_lists"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#module-detail",
        "title": "The custom_functions.py module > Module detail",
        "section": "Module detail",
        "text": "Get lists of strings depending on Python file sections.\nPath containing the Python file.\nList containing the docstring Returns section.\nList containing the docstring Examples section.\nList containing the source code.\nList containing the library import section.\nModule detail\nList\npython:str\nReturns\nList\npython:str\nExamples\nList\npython:str\nList\npython:str"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/index",
        "href": "api/src/pyconverter/xml2py/custom_functions/index.html#custom_functions.get_docstring_lists",
        "title": "The custom_functions.py module > Module detail > get_docstring_lists",
        "section": "Module detail > get_docstring_lists",
        "text": "custom_functions.get_docstring_lists(filename: str) -> Tuple[list[str], list[str], list[str], list[str]]\n\nGet lists of strings depending on Python file sections.\n\nParameters\n\nfilename: str\n\nPath containing the Python file.\n\nReturns\n\nList[python:str]\n\nList containing the docstring Returns section.\n\nList[python:str]\n\nList containing the docstring Examples section.\n\nList[python:str]\n\nList containing the source code.\n\nList[python:str]\n\nList containing the library import section.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes pyconverter-xml2py endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#title",
        "title": "Title",
        "section": "Title",
        "text": "Bases: Element\nProvides the title element.\nTitle\nTitle\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#src.pyconverter.xml2py.ast_tree.Title",
        "title": "Title > Title > Title",
        "section": "Title > Title",
        "text": "class src.pyconverter.xml2py.ast_tree.Title(element, parse_children=True)\n\nBases: Element\n\nProvides the title element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#overview",
        "title": "Title > Overview",
        "section": "Overview",
        "text": "__repr__\nOverview\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#import-detail",
        "title": "Title > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#method-detail",
        "title": "Title > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Title",
        "href": "api/src/pyconverter/xml2py/ast_tree/Title.html#Title.__repr__",
        "title": "Title > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Title.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#emphasis",
        "title": "Emphasis",
        "section": "Emphasis",
        "text": "Bases: Element\nProvides the emphasis element.\nEmphasis\nEmphasis\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#src.pyconverter.xml2py.ast_tree.Emphasis",
        "title": "Emphasis > Emphasis > Emphasis",
        "section": "Emphasis > Emphasis",
        "text": "class src.pyconverter.xml2py.ast_tree.Emphasis(element, parse_children=True)\n\nBases: Element\n\nProvides the emphasis element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#overview",
        "title": "Emphasis > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nrole\nReturn the role parameter value contained in the Emphasis element.\nOverview\nto_rst\nrole"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#import-detail",
        "title": "Emphasis > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#property-detail",
        "title": "Emphasis > Property detail",
        "section": "Property detail",
        "text": "Return the role parameter value contained in the Emphasis element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#Emphasis.role",
        "title": "Emphasis > Property detail > role",
        "section": "Property detail > role",
        "text": "property Emphasis.role\n\nReturn the role parameter value contained in the Emphasis element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#method-detail",
        "title": "Emphasis > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Emphasis",
        "href": "api/src/pyconverter/xml2py/ast_tree/Emphasis.html#Emphasis.to_rst",
        "title": "Emphasis > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "Emphasis.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#the-formatterpy-module",
        "title": "The formatter.py module",
        "section": "The formatter.py module",
        "text": "The formatter.py module\nformatter.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#summary",
        "title": "The formatter.py module > Summary",
        "section": "Summary",
        "text": "run_pre_commit\nRun pre-commit on the autogenerated package.\nSummary\nrun_pre_commit"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#description",
        "title": "The formatter.py module > Description",
        "section": "Description",
        "text": "This module contains the functions to format the generated docstrings with\nBlack.\nDescription"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#module-detail",
        "title": "The formatter.py module > Module detail",
        "section": "Module detail",
        "text": "Run pre-commit on the autogenerated package.\nModule detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/formatter/index",
        "href": "api/src/pyconverter/xml2py/formatter/index.html#formatter.run_pre_commit",
        "title": "The formatter.py module > Module detail > run_pre_commit",
        "section": "Module detail > run_pre_commit",
        "text": "formatter.run_pre_commit(package_path) -> None\n\nRun pre-commit on the autogenerated package.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#xmlcommand",
        "title": "XMLCommand",
        "section": "XMLCommand",
        "text": "Bases: Element\nProvides the XML command from the documentation.\nXMLCommand\nXMLCommand\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#src.pyconverter.xml2py.ast_tree.XMLCommand",
        "title": "XMLCommand > XMLCommand > XMLCommand",
        "section": "XMLCommand > XMLCommand",
        "text": "class src.pyconverter.xml2py.ast_tree.XMLCommand(filename, refentry, terms, docu_global, version_variables, links, fcache, meta_only=False)\n\nBases: Element\n\nProvides the XML command from the documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#overview",
        "title": "XMLCommand > Overview",
        "section": "Overview",
        "text": "py_signature\nBeginning of the Python command’s definition.\npy_docstring\nPython docstring of the command.\npy_notes\nPython-formatted notes string.\npy_parm\nPython parameter’s string.\npy_source\nReturn the Python source.\nto_python\nReturn the complete Python definition of the command.\nxml_filename\nSource filename of the command.\nargs\nCommand arguments.\ndefault\nCommand default.\narg_desc\nArgument object list of the command.\nshort_desc\nShort description of the command.\nname\nName of the XML command.\npy_name\nPython-compatible name.\npy_args\nis_archived\nFlag indicating if the command is archived.\ngroup\nGroup of the command.\nurl\nURL to the Ansys command documentation.\nfilename\nCommand filename\nnotes\nNotes of the command.\n__repr__\nOverview\npy_signature\npy_docstring\npy_notes\npy_parm\npy_source\nto_python\nxml_filename\nargs\ndefault\narg_desc\nshort_desc\nname\npy_name\npy_args\nis_archived\ngroup\nurl\nfilename\nnotes\n__repr__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#import-detail",
        "title": "XMLCommand > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#property-detail",
        "title": "XMLCommand > Property detail",
        "section": "Property detail",
        "text": "Source filename of the command.\nCommand arguments.\nCommand default.\nArgument object list of the command.\nShort description of the command.\nName of the XML command.\nPython-compatible name.\nFlag indicating if the command is archived.\nGroup of the command.\nURL to the Ansys command documentation.\nCommand filename\nNotes of the command.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.xml_filename",
        "title": "XMLCommand > Property detail > xml_filename",
        "section": "Property detail > xml_filename",
        "text": "property XMLCommand.xml_filename\n\nSource filename of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.args",
        "title": "XMLCommand > Property detail > args",
        "section": "Property detail > args",
        "text": "property XMLCommand.args\n\nCommand arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.default",
        "title": "XMLCommand > Property detail > default",
        "section": "Property detail > default",
        "text": "property XMLCommand.default\n\nCommand default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.arg_desc",
        "title": "XMLCommand > Property detail > arg_desc",
        "section": "Property detail > arg_desc",
        "text": "property XMLCommand.arg_desc: List[Argument]\n\nArgument object list of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.short_desc",
        "title": "XMLCommand > Property detail > short_desc",
        "section": "Property detail > short_desc",
        "text": "property XMLCommand.short_desc\n\nShort description of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.name",
        "title": "XMLCommand > Property detail > name",
        "section": "Property detail > name",
        "text": "property XMLCommand.name\n\nName of the XML command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_name",
        "title": "XMLCommand > Property detail > py_name",
        "section": "Property detail > py_name",
        "text": "property XMLCommand.py_name\n\nPython-compatible name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_args",
        "title": "XMLCommand > Property detail > py_args",
        "section": "Property detail > py_args",
        "text": "property XMLCommand.py_args\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.is_archived",
        "title": "XMLCommand > Property detail > is_archived",
        "section": "Property detail > is_archived",
        "text": "property XMLCommand.is_archived\n\nFlag indicating if the command is archived.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.group",
        "title": "XMLCommand > Property detail > group",
        "section": "Property detail > group",
        "text": "property XMLCommand.group\n\nGroup of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.url",
        "title": "XMLCommand > Property detail > url",
        "section": "Property detail > url",
        "text": "property XMLCommand.url\n\nURL to the Ansys command documentation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.filename",
        "title": "XMLCommand > Property detail > filename",
        "section": "Property detail > filename",
        "text": "property XMLCommand.filename\n\nCommand filename\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.notes",
        "title": "XMLCommand > Property detail > notes",
        "section": "Property detail > notes",
        "text": "property XMLCommand.notes\n\nNotes of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#method-detail",
        "title": "XMLCommand > Method detail",
        "section": "Method detail",
        "text": "Beginning of the Python command’s definition.\nPython docstring of the command.\nPython-formatted notes string.\nPython parameter’s string.\nReturn the Python source.\nCustom functions to add to the command. The default is None.\nReturn the complete Python definition of the command.\nCustom functions to add to the command. The default is None.\nIndentation of the Python function. The default is \"\".\nPython function of the command including the converted docstring.\nMethod detail\nNone\nNone\n\"\"\npython:str"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_signature",
        "title": "XMLCommand > Method detail > py_signature",
        "section": "Method detail > py_signature",
        "text": "XMLCommand.py_signature(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions, indent='') -> str\n\nBeginning of the Python command’s definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_docstring",
        "title": "XMLCommand > Method detail > py_docstring",
        "section": "Method detail > py_docstring",
        "text": "XMLCommand.py_docstring(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions) -> str\n\nPython docstring of the command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_notes",
        "title": "XMLCommand > Method detail > py_notes",
        "section": "Method detail > py_notes",
        "text": "XMLCommand.py_notes(custom_functions: pyconverter.xml2py.custom_functions.CustomFunctions = None)\n\nPython-formatted notes string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.__repr__",
        "title": "XMLCommand > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "XMLCommand.__repr__()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_parm",
        "title": "XMLCommand > Method detail > py_parm",
        "section": "Method detail > py_parm",
        "text": "XMLCommand.py_parm(custom_functions=None, indent='', links=None, base_url=None, fcache=None)\n\nPython parameter’s string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.py_source",
        "title": "XMLCommand > Method detail > py_source",
        "section": "Method detail > py_source",
        "text": "XMLCommand.py_source(custom_functions=None, indent='')\n\nReturn the Python source.\n\nParameters\n\ncustom_functions: CustomFunctions, optional\n\nCustom functions to add to the command. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLCommand",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLCommand.html#XMLCommand.to_python",
        "title": "XMLCommand > Method detail > to_python",
        "section": "Method detail > to_python",
        "text": "XMLCommand.to_python(custom_functions=None, indent='')\n\nReturn the complete Python definition of the command.\n\nParameters\n\ncustom_functions: CustomFunctions, optional\n\nCustom functions to add to the command. The default is None.\n\nindent: str, optional\n\nIndentation of the Python function. The default is \"\".\n\nReturns\n\npython:str\n\nPython function of the command including the converted docstring.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLWarning",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#xmlwarning",
        "title": "XMLWarning",
        "section": "XMLWarning",
        "text": "Bases: Element\nProvides the base element.\nXMLWarning\nXMLWarning\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLWarning",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#src.pyconverter.xml2py.ast_tree.XMLWarning",
        "title": "XMLWarning > XMLWarning > XMLWarning",
        "section": "XMLWarning > XMLWarning",
        "text": "class src.pyconverter.xml2py.ast_tree.XMLWarning(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XMLWarning",
        "href": "api/src/pyconverter/xml2py/ast_tree/XMLWarning.html#import-detail",
        "title": "XMLWarning > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#orderedlist",
        "title": "OrderedList",
        "section": "OrderedList",
        "text": "Bases: Element\nProvides the ordered list element.\nOrderedList\nOrderedList\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#src.pyconverter.xml2py.ast_tree.OrderedList",
        "title": "OrderedList > OrderedList > OrderedList",
        "section": "OrderedList > OrderedList",
        "text": "class src.pyconverter.xml2py.ast_tree.OrderedList(element, parse_children=True)\n\nBases: Element\n\nProvides the ordered list element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#overview",
        "title": "OrderedList > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\nOverview\nto_rst"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#import-detail",
        "title": "OrderedList > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#method-detail",
        "title": "OrderedList > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/OrderedList",
        "href": "api/src/pyconverter/xml2py/ast_tree/OrderedList.html#OrderedList.to_rst",
        "title": "OrderedList > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "OrderedList.to_rst(indent='', max_length=100, links=None, base_url=None)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#argumentlist",
        "title": "ArgumentList",
        "section": "ArgumentList",
        "text": "ArgumentList\nArgumentList"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#src.pyconverter.xml2py.ast_tree.ArgumentList",
        "title": "ArgumentList > ArgumentList > ArgumentList",
        "section": "ArgumentList > ArgumentList",
        "text": "class src.pyconverter.xml2py.ast_tree.ArgumentList(list_entry: VarlistEntry, args: List)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#overview",
        "title": "ArgumentList > Overview",
        "section": "Overview",
        "text": "arguments\ninitial_args\npy_arg_names\n__iadd__\nOverview\narguments\ninitial_args\npy_arg_names\n__iadd__"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#import-detail",
        "title": "ArgumentList > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#property-detail",
        "title": "ArgumentList > Property detail",
        "section": "Property detail",
        "text": "Property detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#ArgumentList.arguments",
        "title": "ArgumentList > Property detail > arguments",
        "section": "Property detail > arguments",
        "text": "property ArgumentList.arguments\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#ArgumentList.initial_args",
        "title": "ArgumentList > Property detail > initial_args",
        "section": "Property detail > initial_args",
        "text": "property ArgumentList.initial_args\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#ArgumentList.py_arg_names",
        "title": "ArgumentList > Property detail > py_arg_names",
        "section": "Property detail > py_arg_names",
        "text": "property ArgumentList.py_arg_names\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#method-detail",
        "title": "ArgumentList > Method detail",
        "section": "Method detail",
        "text": "Method detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/ArgumentList",
        "href": "api/src/pyconverter/xml2py/ast_tree/ArgumentList.html#ArgumentList.__iadd__",
        "title": "ArgumentList > Method detail > __iadd__",
        "section": "Method detail > __iadd__",
        "text": "ArgumentList.__iadd__(argument_list)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#row",
        "title": "Row",
        "section": "Row",
        "text": "Bases: Element\nProvides the row element.\nRow\nRow\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#src.pyconverter.xml2py.ast_tree.Row",
        "title": "Row > Row > Row",
        "section": "Row > Row",
        "text": "class src.pyconverter.xml2py.ast_tree.Row(element, parse_children=True)\n\nBases: Element\n\nProvides the row element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#overview",
        "title": "Row > Overview",
        "section": "Overview",
        "text": "to_rst_list\nReturn a list to enable converting the element to an RST format.\nentry\nReturn all entry elements found in the row element.\nOverview\nto_rst_list\nentry"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#import-detail",
        "title": "Row > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#property-detail",
        "title": "Row > Property detail",
        "section": "Property detail",
        "text": "Return all entry elements found in the row element.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#Row.entry",
        "title": "Row > Property detail > entry",
        "section": "Property detail > entry",
        "text": "property Row.entry\n\nReturn all entry elements found in the row element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#method-detail",
        "title": "Row > Method detail",
        "section": "Method detail",
        "text": "Return a list to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Row",
        "href": "api/src/pyconverter/xml2py/ast_tree/Row.html#Row.to_rst_list",
        "title": "Row > Method detail > to_rst_list",
        "section": "Method detail > to_rst_list",
        "text": "Row.to_rst_list(indent='', links=None, base_url=None)\n\nReturn a list to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Screen",
        "href": "api/src/pyconverter/xml2py/ast_tree/Screen.html#screen",
        "title": "Screen",
        "section": "Screen",
        "text": "Bases: Element\nProvides the screen element.\nScreen\nScreen\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Screen",
        "href": "api/src/pyconverter/xml2py/ast_tree/Screen.html#src.pyconverter.xml2py.ast_tree.Screen",
        "title": "Screen > Screen > Screen",
        "section": "Screen > Screen",
        "text": "class src.pyconverter.xml2py.ast_tree.Screen(element, parse_children=True)\n\nBases: Element\n\nProvides the screen element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Screen",
        "href": "api/src/pyconverter/xml2py/ast_tree/Screen.html#import-detail",
        "title": "Screen > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#customfunctions",
        "title": "CustomFunctions",
        "section": "CustomFunctions",
        "text": "Provides for creating customized functions.\nCustomFunctions\nCustomFunctions"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#src.pyconverter.xml2py.custom_functions.CustomFunctions",
        "title": "CustomFunctions > CustomFunctions > CustomFunctions",
        "section": "CustomFunctions > CustomFunctions",
        "text": "class src.pyconverter.xml2py.custom_functions.CustomFunctions\n\nProvides for creating customized functions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#overview",
        "title": "CustomFunctions > Overview",
        "section": "Overview",
        "text": "path\nPath object where the customized function files are located.\npy_names\nList with all customized functions located in the folder.\npy_args\nDictionary containing the python arguments if any.\npy_params\nDictionary containing the Parameters section if any.\npy_returns\nDictionary containing the Returns section if any.\npy_examples\nDictionary containing the Examples section if any.\npy_notes\nDictionary containing the Notes section if any.\npy_code\nDictionary containing the customized source code.\nlib_import\nDictionary containing the needed libraries if any.\nOverview\npath\npy_names\npy_args\npy_params\nParameters\npy_returns\nReturns\npy_examples\nExamples\npy_notes\nNotes\npy_code\nlib_import"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#import-detail",
        "title": "CustomFunctions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#property-detail",
        "title": "CustomFunctions > Property detail",
        "section": "Property detail",
        "text": "Path object where the customized function files are located.\nList with all customized functions located in the folder.\nDictionary containing the python arguments if any.\nDictionary containing the Parameters section if any.\nDictionary containing the Returns section if any.\nDictionary containing the Examples section if any.\nDictionary containing the Notes section if any.\nDictionary containing the customized source code.\nDictionary containing the needed libraries if any.\nProperty detail\nParameters\nReturns\nExamples\nNotes"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.path",
        "title": "CustomFunctions > Property detail > path",
        "section": "Property detail > path",
        "text": "property CustomFunctions.path: pathlib.Path\n\nPath object where the customized function files are located.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_names",
        "title": "CustomFunctions > Property detail > py_names",
        "section": "Property detail > py_names",
        "text": "property CustomFunctions.py_names: list\n\nList with all customized functions located in the folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_args",
        "title": "CustomFunctions > Property detail > py_args",
        "section": "Property detail > py_args",
        "text": "property CustomFunctions.py_args: dict\n\nDictionary containing the python arguments if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_params",
        "title": "CustomFunctions > Property detail > py_params",
        "section": "Property detail > py_params",
        "text": "property CustomFunctions.py_params: dict\n\nDictionary containing the Parameters section if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_returns",
        "title": "CustomFunctions > Property detail > py_returns",
        "section": "Property detail > py_returns",
        "text": "property CustomFunctions.py_returns: dict\n\nDictionary containing the Returns section if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_examples",
        "title": "CustomFunctions > Property detail > py_examples",
        "section": "Property detail > py_examples",
        "text": "property CustomFunctions.py_examples: dict\n\nDictionary containing the Examples section if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_notes",
        "title": "CustomFunctions > Property detail > py_notes",
        "section": "Property detail > py_notes",
        "text": "property CustomFunctions.py_notes: dict\n\nDictionary containing the Notes section if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.py_code",
        "title": "CustomFunctions > Property detail > py_code",
        "section": "Property detail > py_code",
        "text": "property CustomFunctions.py_code: dict\n\nDictionary containing the customized source code.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions",
        "href": "api/src/pyconverter/xml2py/custom_functions/CustomFunctions.html#CustomFunctions.lib_import",
        "title": "CustomFunctions > Property detail > lib_import",
        "section": "Property detail > lib_import",
        "text": "property CustomFunctions.lib_import: dict\n\nDictionary containing the needed libraries if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnote.html#footnote",
        "title": "Footnote",
        "section": "Footnote",
        "text": "Bases: Element\nProvides the base element.\nFootnote\nFootnote\nElement"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnote.html#src.pyconverter.xml2py.ast_tree.Footnote",
        "title": "Footnote > Footnote > Footnote",
        "section": "Footnote > Footnote",
        "text": "class src.pyconverter.xml2py.ast_tree.Footnote(element, parse_children=True)\n\nBases: Element\n\nProvides the base element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/Footnote",
        "href": "api/src/pyconverter/xml2py/ast_tree/Footnote.html#import-detail",
        "title": "Footnote > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyConverter-XML2Py.\nThe following contribution information is specific to PyConverter-XML2Py.\nContribute"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#developer-installation",
        "title": "Contribute > Developer installation",
        "section": "Developer installation",
        "text": "Follow these steps to install the package in developer mode:\nClone the repository:\nCreate a fresh-clean Python environment and activate it. If you require\nadditional information on creation of a virtual environment, see the\nofficial Python venv documentation.\nMake sure you have the latest version of pip:\nInstall the project in editable mode:\nInstall additional requirements (if needed):\nVerify your development installation:\nDeveloper installation"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#style-and-testing",
        "title": "Contribute > Style and testing",
        "section": "Style and testing",
        "text": "If required, you can call style commands (such as black, isort,\nand flake8) or unit testing commands (such as pytest) from the command line.\nHowever, this does not guarantee that your project is being tested in an isolated\nenvironment, which is why you might consider using tox.\nStyle and testing"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#documentation",
        "title": "Contribute > Documentation",
        "section": "Documentation",
        "text": "For building documentation, you can run the usual rules provided in the\nSphinx Makefile or make.bat:\nOnce the documentation is built, you can open it as follows.\nBy running the command:\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\nBy opening the documentation, which you do by going to the doc/html directory\nand opening the index.html file.\nDocumentation\ndoc/html\nindex.html\ndoc/html\nindex.html"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyConverter-XML2Py follows the PEP8 standard as outlined in the PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run this code:\nYou can also install this as a pre-commit hook by running this code:\nThis way, it’s not possible for you to push code that fails the style checks\nAdhere to code style"
    },
    {
        "objectID": "contributing/index",
        "href": "contributing/index.html#distributing",
        "title": "Contribute > Distributing",
        "section": "Distributing",
        "text": "If you would like to create either source or wheel files, start by installing\nthe building requirements:\nThen, execute these commands:\nDistributing"
    },
    {
        "objectID": "user_guide/source_code",
        "href": "user_guide/source_code.html#source-code-generation",
        "title": "Source code generation",
        "section": "Source code generation",
        "text": "Source code is automatically generated from the name of the commands\nand the parameters defined in the documentation.\nHere are the initial command and then the default Python code that\nthis command generates:\nSource code generation"
    },
    {
        "objectID": "user_guide/source_code",
        "href": "user_guide/source_code.html#customized-functions",
        "title": "Source code generation > Customized functions",
        "section": "Customized functions",
        "text": "The converter can handle code generation for functions that require a\ncustomized code. To specify the folder containing these files, you must\nbe specified the -f or --func-path arguments in the command for\ngenerating the code:\nIn this configuration, the provided code is used for the conversion.\nAdditionally, any Returns and Examples sections are taken\ninto account and added to the Python docstring:\nCustomized functions\n-f\n--func-path"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#xref",
        "title": "XRef",
        "section": "XRef",
        "text": "Bases: Link\nProvides the cross reference element.\nXRef\nXRef\nLink"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#src.pyconverter.xml2py.ast_tree.XRef",
        "title": "XRef > XRef > XRef",
        "section": "XRef > XRef",
        "text": "class src.pyconverter.xml2py.ast_tree.XRef(element)\n\nBases: Link\n\nProvides the cross reference element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#overview",
        "title": "XRef > Overview",
        "section": "Overview",
        "text": "to_rst\nReturn a string to enable converting the element to an RST format.\ntail\nTail of the element as a string.\nOverview\nto_rst\ntail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#import-detail",
        "title": "XRef > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#property-detail",
        "title": "XRef > Property detail",
        "section": "Property detail",
        "text": "Tail of the element as a string.\nProperty detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#XRef.tail",
        "title": "XRef > Property detail > tail",
        "section": "Property detail > tail",
        "text": "property XRef.tail\n\nTail of the element as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#method-detail",
        "title": "XRef > Method detail",
        "section": "Method detail",
        "text": "Return a string to enable converting the element to an RST format.\nMethod detail"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/XRef",
        "href": "api/src/pyconverter/xml2py/ast_tree/XRef.html#XRef.to_rst",
        "title": "XRef > Method detail > to_rst",
        "section": "Method detail > to_rst",
        "text": "XRef.to_rst(indent='', max_length=100)\n\nReturn a string to enable converting the element to an RST format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#the-ast_treepy-module",
        "title": "The ast_tree.py module",
        "section": "The ast_tree.py module",
        "text": "The ast_tree.py module\nast_tree.py"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#summary",
        "title": "The ast_tree.py module > Summary",
        "section": "Summary",
        "text": "NameMap\nElement\nProvides the base element.\nItemizedList\nProvides the itemized list element.\nSimpleList\nProvides the simple itemized list element.\nMember\nProvides the member element for a simple itemized list.\nOrderedList\nProvides the ordered list element.\nListItem\nProvides the list item element.\nFileName\nProvides the filename element.\nOLink\nProvides the external link element.\nParagraph\nProvides the paragraph element.\nPhrase\nProvides the phrase element.\nStructname\nProvides the structure name element.\nTitle\nProvides the title element.\nEmphasis\nProvides the emphasis element.\nExample\nProvides the example element.\nInformalExample\nProvides the informal example element.\nGuiMenu\nProvides the GUI menu element.\nReplaceable\nProvides the replaceable element.\nProgramListing\nProvides the program listing element.\nVariablelist\nProvides the variable list.\nRefSection\nProvides the reference section element.\nVarlistEntry\nProvides the variable list entry element.\nTerm\nProvides the term element.\nGuiLabel\nProvides the GUI label element.\nGuiMenuItem\nProvides the GUI menu item element.\nSuperScript\nProvides the superscript element.\nCode\nProvides the code element.\nMath\nProvides the math element.\nInlineEquation\nProvides the inline equation element.\nSubScript\nProvides the subscript element.\nInlineGraphic\nProvides the inline graphic element.\nQuote\nProvides the quote element.\nLink\nProvides the link element.\nXRef\nProvides the cross reference element.\nUserInput\nProvides the user input element.\nScreen\nProvides the screen element.\nLiteral\nProvides the literal output element.\nCaution\nProvides the caution element.\nGraphic\nProvides the graphic element.\nFunction\nProvides the function element.\nNote\nProvides the note element.\nBlockQuote\nProvides the block quote element.\nRefMeta\nProvides the reference metadata element.\nIndexTerm\nProvides the index term element.\nPrimary\nProvides the primary element.\nTGroup\nProvides the tgroup element, which contains the header and body rows of a table.\nTable\nProvides the table element\nRefentrytitle\nProvides the title of the reference entry.\nRefnamediv\nProvides the refnamediv element, which contains the name,\nRefname\nProvides the refname element which contains\nRefpurpose\nProvides the refpurpose element, which contains\nRefclass\nProvides the base element.\nApplication\nProvides the base element.\nRefsect1\nProvides the base element.\nCommand\nProvides the command element.\nComputerOutput\nProvides the computer output element.\nFigure\nProvides the figure element.\nFootnote\nProvides the base element.\nFootnoteref\nProvides the base element.\nFormalpara\nProvides the base element.\nGlossterm\nProvides the base element.\nGuiButton\nProvides the base element.\nGuiIcon\nProvides the base element.\nHighlights\nProvides the base element.\nImportant\nProvides the base element.\nInformalEquation\nProvides the base element.\nInterface\nProvides the base element.\nMarkup\nProvides the base element.\nMediaobject\nProvides the base element.\nOption\nProvides the base element.\nRefsect3\nProvides the base element.\nRefsynopsisdiv\nProvides the base element.\nSidebar\nProvides the base element.\nXMLType\nProvides the base element.\nXMLWarning\nProvides the base element.\nClassName\nProvides the base element.\nImageobject\nProvides the base element.\nInformalFigure\nProvides the base element.\nEnvar\nProvides the base element.\nImageData\nProvides the base element.\nColSpec\nProvides the base element.\nTBody\nProvides the tbody element.\nEntry\nProvides the entry element.\nRow\nProvides the row element.\nTHead\nProvides the thead element.\nRemark\nProvides the base element.\nLiteralLayout\nProvides the base element.\nCiteTitle\nProvides the base element.\nULink\nProvides the base element.\nSegTitle\nProvides the base element.\nChapter\nProvides the chapter element.\nSection1\nProvides the base element.\nProductName\nProvides the base element.\nArgumentList\nArgument\nArgument object.\nXMLCommand\nProvides the XML command from the documentation.\nInformalTable\nProvides the informal table element.\nOxygenXmlTree\nProvides for loading an XML file as an AST (abstract syntax tree).\nto_py_name\nConvert to a Python-compatible name.\nget_iter_values\nGet the values of an iterator.\nget_quant_iter_pos\nGet the values of a quantity iterator.\nto_py_arg_name\nPython-compatible term\nget_complete_args_from_initial_arg\nis_elipsis\nCheck if a name is an elipsis.\nstr_types\nString representation of the parameter types.\nto_py_signature\nReturn the Python signature of the argument.\nresize_length\nResize the length of a text.\nponctuaction_whitespace\nresize_element_list\nparse_element\nParse a single element.\nparse_children\nParse the children of an element.\nparse_text\nParse a paragraph element.\nget_parser\nsuperlatif\nparsers\nitem_needing_links_base_url\nitem_needing_fcache\nitem_needing_all\nCONV_EQN\nCONST\nCLEANUP\nPY_ARG_CLEANUP\nNAME_MAP_GLOB\nNO_RESIZE_LIST\nSummary\nNameMap\nElement\nItemizedList\nSimpleList\nMember\nOrderedList\nListItem\nFileName\nOLink\nParagraph\nPhrase\nStructname\nTitle\nEmphasis\nExample\nInformalExample\nGuiMenu\nReplaceable\nProgramListing\nVariablelist\nRefSection\nVarlistEntry\nTerm\nGuiLabel\nGuiMenuItem\nSuperScript\nCode\nMath\nInlineEquation\nSubScript\nInlineGraphic\nQuote\nLink\nXRef\nUserInput\nScreen\nLiteral\nCaution\nGraphic\nFunction\nNote\nBlockQuote\nRefMeta\nIndexTerm\nPrimary\nTGroup\nTable\nRefentrytitle\nRefnamediv\nRefname\nRefpurpose\nRefclass\nApplication\nRefsect1\nCommand\nComputerOutput\nFigure\nFootnote\nFootnoteref\nFormalpara\nGlossterm\nGuiButton\nGuiIcon\nHighlights\nImportant\nInformalEquation\nInterface\nMarkup\nMediaobject\nOption\nRefsect3\nRefsynopsisdiv\nSidebar\nXMLType\nXMLWarning\nClassName\nImageobject\nInformalFigure\nEnvar\nImageData\nColSpec\nTBody\nEntry\nRow\nTHead\nRemark\nLiteralLayout\nCiteTitle\nULink\nSegTitle\nChapter\nSection1\nProductName\nArgumentList\nArgument\nXMLCommand\nInformalTable\nOxygenXmlTree\nto_py_name\nget_iter_values\nget_quant_iter_pos\nto_py_arg_name\nget_complete_args_from_initial_arg\nis_elipsis\nstr_types\nto_py_signature\nresize_length\nponctuaction_whitespace\nresize_element_list\nparse_element\nparse_children\nparse_text\nget_parser\nsuperlatif\nparsers\nitem_needing_links_base_url\nitem_needing_fcache\nitem_needing_all\nCONV_EQN\nCONST\nCLEANUP\nPY_ARG_CLEANUP\nNAME_MAP_GLOB\nNO_RESIZE_LIST"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#module-detail",
        "title": "The ast_tree.py module > Module detail",
        "section": "Module detail",
        "text": "Convert to a Python-compatible name.\nGet the values of an iterator.\nGet the values of a quantity iterator.\nName of the parameter containing the iterator.\nTuple containing the iteration value and the position of the iterator.\nPython-compatible term\nCheck if a name is an elipsis.\nTrue if the argument is an elipsis, False otherwise.\nString representation of the parameter types.\nReturn the Python signature of the argument.\nResize the length of a text.\nParse a single element.\nParse the children of an element.\nList of the children of the element.\nParse a paragraph element.\nModule detail\npython:tuple\npython:list"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.to_py_name",
        "title": "The ast_tree.py module > Module detail > to_py_name",
        "section": "Module detail > to_py_name",
        "text": "ast_tree.to_py_name(name, name_map=None)\n\nConvert to a Python-compatible name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.get_iter_values",
        "title": "The ast_tree.py module > Module detail > get_iter_values",
        "section": "Module detail > get_iter_values",
        "text": "ast_tree.get_iter_values(name: str)\n\nGet the values of an iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.get_quant_iter_pos",
        "title": "The ast_tree.py module > Module detail > get_quant_iter_pos",
        "section": "Module detail > get_quant_iter_pos",
        "text": "ast_tree.get_quant_iter_pos(name: str) -> tuple\n\nGet the values of a quantity iterator.\n\nParameters\n\nname: str\n\nName of the parameter containing the iterator.\n\nReturns\n\npython:tuple\n\nTuple containing the iteration value and the position of the iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.to_py_arg_name",
        "title": "The ast_tree.py module > Module detail > to_py_arg_name",
        "section": "Module detail > to_py_arg_name",
        "text": "ast_tree.to_py_arg_name(name: str) -> str\n\nPython-compatible term\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.get_complete_args_from_initial_arg",
        "title": "The ast_tree.py module > Module detail > get_complete_args_from_initial_arg",
        "section": "Module detail > get_complete_args_from_initial_arg",
        "text": "ast_tree.get_complete_args_from_initial_arg(initial_args: List[str], elipsis_args: List[str]) -> List[str]\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.is_elipsis",
        "title": "The ast_tree.py module > Module detail > is_elipsis",
        "section": "Module detail > is_elipsis",
        "text": "ast_tree.is_elipsis(name: str) -> bool\n\nCheck if a name is an elipsis.\n\nReturns\n\nbool\n\nTrue if the argument is an elipsis, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.str_types",
        "title": "The ast_tree.py module > Module detail > str_types",
        "section": "Module detail > str_types",
        "text": "ast_tree.str_types(types, join_str: str) -> str\n\nString representation of the parameter types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.to_py_signature",
        "title": "The ast_tree.py module > Module detail > to_py_signature",
        "section": "Module detail > to_py_signature",
        "text": "ast_tree.to_py_signature(py_arg_name, types) -> str\n\nReturn the Python signature of the argument.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.resize_length",
        "title": "The ast_tree.py module > Module detail > resize_length",
        "section": "Module detail > resize_length",
        "text": "ast_tree.resize_length(text, max_length=100, initial_indent='', subsequent_indent='', list=False)\n\nResize the length of a text.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.ponctuaction_whitespace",
        "title": "The ast_tree.py module > Module detail > ponctuaction_whitespace",
        "section": "Module detail > ponctuaction_whitespace",
        "text": "ast_tree.ponctuaction_whitespace(text, ponctuation)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.resize_element_list",
        "title": "The ast_tree.py module > Module detail > resize_element_list",
        "section": "Module detail > resize_element_list",
        "text": "ast_tree.resize_element_list(text, max_length=100)\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.parse_element",
        "title": "The ast_tree.py module > Module detail > parse_element",
        "section": "Module detail > parse_element",
        "text": "ast_tree.parse_element(element)\n\nParse a single element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.parse_children",
        "title": "The ast_tree.py module > Module detail > parse_children",
        "section": "Module detail > parse_children",
        "text": "ast_tree.parse_children(element)\n\nParse the children of an element.\n\nReturns\n\npython:list\n\nList of the children of the element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.parse_text",
        "title": "The ast_tree.py module > Module detail > parse_text",
        "section": "Module detail > parse_text",
        "text": "ast_tree.parse_text(element)\n\nParse a paragraph element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.get_parser",
        "title": "The ast_tree.py module > Module detail > get_parser",
        "section": "Module detail > get_parser",
        "text": "ast_tree.get_parser()\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.CONV_EQN",
        "title": "The ast_tree.py module > Module detail > CONV_EQN",
        "section": "Module detail > CONV_EQN",
        "text": "ast_tree.CONV_EQN = False\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.CONST",
        "title": "The ast_tree.py module > Module detail > CONST",
        "section": "Module detail > CONST",
        "text": "ast_tree.CONST\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.CLEANUP",
        "title": "The ast_tree.py module > Module detail > CLEANUP",
        "section": "Module detail > CLEANUP",
        "text": "ast_tree.CLEANUP\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.PY_ARG_CLEANUP",
        "title": "The ast_tree.py module > Module detail > PY_ARG_CLEANUP",
        "section": "Module detail > PY_ARG_CLEANUP",
        "text": "ast_tree.PY_ARG_CLEANUP\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.NAME_MAP_GLOB",
        "title": "The ast_tree.py module > Module detail > NAME_MAP_GLOB",
        "section": "Module detail > NAME_MAP_GLOB",
        "text": "ast_tree.NAME_MAP_GLOB\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.NO_RESIZE_LIST",
        "title": "The ast_tree.py module > Module detail > NO_RESIZE_LIST",
        "section": "Module detail > NO_RESIZE_LIST",
        "text": "ast_tree.NO_RESIZE_LIST = ['Variablelist']\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.superlatif",
        "title": "The ast_tree.py module > Module detail > superlatif",
        "section": "Module detail > superlatif",
        "text": "ast_tree.superlatif = ['st', 'nd', 'rd', 'th']\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.parsers",
        "title": "The ast_tree.py module > Module detail > parsers",
        "section": "Module detail > parsers",
        "text": "ast_tree.parsers\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.item_needing_links_base_url",
        "title": "The ast_tree.py module > Module detail > item_needing_links_base_url",
        "section": "Module detail > item_needing_links_base_url",
        "text": "ast_tree.item_needing_links_base_url\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.item_needing_fcache",
        "title": "The ast_tree.py module > Module detail > item_needing_fcache",
        "section": "Module detail > item_needing_fcache",
        "text": "ast_tree.item_needing_fcache\n\n"
    },
    {
        "objectID": "api/src/pyconverter/xml2py/ast_tree/index",
        "href": "api/src/pyconverter/xml2py/ast_tree/index.html#ast_tree.item_needing_all",
        "title": "The ast_tree.py module > Module detail > item_needing_all",
        "section": "Module detail > item_needing_all",
        "text": "ast_tree.item_needing_all\n\n"
    }
]